#
# COPYRIGHT Ericsson 2024
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#

openapi: 3.0.3
info:
  version: 1.0.0
  title: EVNFM VNF Lifecycle Management Interface /v1
  description: >
    SOL003 - VNF Lifecycle Management interface definition
    IMPORTANT: Please note that this file might be not aligned to the current
    version of the ETSI Group Specification it refers to. It contains EVNFM specific interfaces,
    cherry picked features from a number of ETSI SOL003 versions as well as extensions to the ETSI Group Specification.
externalDocs:
  description: ETSI GS NFV-SOL 003 V2.5.1
  url: >-
    https://www.etsi.org/deliver/etsi_gs/NFV-SOL/001_099/003/02.05.01_60/gs_NFV-SOL003v020501p.pdf

servers:
  - url: '{protocol}://{hostname}/{basePath}'
    variables:
      protocol:
        default: https
      hostname:
        default: ${INGRESS_HOST_ADDRESS}
      basePath:
        default: vnflcm/v1

tags:
  - name: VNF Instance Operations
    description: Groups all the VNF Instance operations.
  - name: VNF Lifecycle Operations
    description: Groups all the VNF Lifecycle operations.
  - name: Cluster Configs
    description: Groups all Cluster Configs operations.
  - name: Cluster Config Names
    description: Groups all Cluster Config Names operations.
  - name: Cism Cluster Data
    description: Groups all Cism Cluster Data operations.

paths:
  /vnf_instances:
    post:
      tags:
        - VNF Instance Operations
      summary: Create VNF Identifier
      description: Use this POST method to create a new VNF instance resource.
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: The VNF creation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVnfRequest'
      operationId: createVnfInstance
      responses:
        '201':
          description: A VNF Instance identifier was created successfully
          headers:
            Content-Type:
              description: The MIME type of the body of the response.
              schema:
                type: string
            Location:
              description: The resource URI of the created VNF instance
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VnfInstanceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '413':
          $ref: '#/components/responses/PayloadTooLarge'
        '414':
          $ref: '#/components/responses/URITooLong'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    get:
      tags:
        - VNF Instance Operations
      summary: Query VNFs
      description: |
        The GET method queries information about multiple VNF instances.
        
        1) **NOTE:** In co-deployed environment (when both CVNFM and VM VNFM deployed) API call will be forwarded to CVNFM and VM VNFM, response will
            be merged. The following must be considered:
        
          - API response for CNFs and VM VNFs may have some differences because CVNFM and VM VNFM have different capabilities. This section 
            describes CVNFM capabilities; for VM VNFM capabilities refer to: "Or-Vnfm API v1 Documentation", "Or-Vnfm API v2 Documentation".
          
          - Responses from CVNFM and VM VNFM will be merged according to the following principle: the system will first return instances from the 
            CVNFM, followed by instances from the VM VNFM. Example: When the page size is set to 10, the system will return 10 instances
            from the CVNFM, and this process will continue until all instances in the CVNFM have been returned.
            It is possible that the last page may be incomplete. Subsequently, the system will return 10 instances from the VM VNFM,
            and this process will also continue until all instances in the VM VNFM have been returned.

        2) When both the CVNFM and VM VNFM are deployed, after making initial call GET /vnf_instances to navigate through multiple pages,
            consider utilizing the entries from the "link" section present in the response header:
        
            - "rel="first" link marked with this entry will direct you to the initial paginated page.
            - "rel="self" link indicates your current position within the pagination pages.
            - "rel="next" link will guide you to the next paginated page (this can be empty if it is the last page).

        3) Be aware that during pagination, the "nextpage_opaque_marker" can provide information about the type of
            VNF you will be receiving in the response. If nextpage_opaque_marker=cvnfm-<subtoken> it signifies that you are receiving
            only CVNFM instances. Conversely, if nextpage_opaque_marker=vmvnfm-<subtoken> it indicates that you are receiving only VM VNFM instances.
        
        4) Usage of this endpoint cannot guarantee response time since it highly depends on cluster performance CNF is installed on. 
            Request may fail with timeout in case if at least one cluster CNF is installed on is not responding
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: filter
          description: |
            1) Attribute-based filtering.
                The VNFM supports receiving this parameter as part of the URI query string.
                The NFVO can supply this parameter. All attribute names that appear in the VnfInstance and 
                in data types referenced from it are supported by the VNFM in the filter expression.
                The following list of operators are supported:
                  - cont - Contains  
                  - eq - Equal
                  - neq - Not equal
            2) **Examples:**
              - vnf_instances?filter=(eq,instantiationState,INSTANTIATED)
              - vnf_instances?filter=(eq,instantiationState,INSTANTIATED)%3B(neq,vnfProvider,Ericsson)
              - vnf_instances?filter=(cont,vnfSoftwareVersion,1.0.12)%3B(eq,lcmOperationDetails%2FlifecycleOperationType,INSTANTIATE)
            
            3) **Note:** If multiple filter attributes are listed (for example, (eq,instantiationState,INSTANTIATED)%3B(neq,vnfProvider,Ericsson)),
                  they are logically connected with an AND operator, so the attributes must be of equal value.
          in: query
          required: false
          schema:
            type: string
        - name: nextpage_opaque_marker
          description: |
            Marker to obtain the next page of a paged response. This is generated by EVNFM as part of the Link response header for a query request,
            and should not be generated, modified or interpreted by any client.
            1) **Examples (for codeploy):**
                - nextpage_opaque_marker=cvnfm-<subtoken>
                - nextpage_opaque_marker=vmvnfm-<subtoken>
            
            2) **Examples (for standalone setup):**
                - nextpage_opaque_marker=<subtoken>
            
            3) The value of the <subtoken> can vary depending on the type of the request:
                * For codeploy and requests for CVNFM, its value should be an integer.
                * For requests to VM VNFM, its value should be in the form of a timestamp (for example, "2024-04-04T13:54:37Z").
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: |
            The number of items per page. The default value is 15. Should be a positive number no greater than 100.
            When both the CVNFM and VM VNFM are deployed, the size parameter is interpreted as the max number of VNFs in the response, 
            there can be pages that are shorter than the size described here, followed by other packages.
          in: query
          required: false
          schema:
            type: integer
        - name: sort
          description: |
            Sorting definition in form 'field[,direction]' where
            direction is asc or desc, defaulting to asc.
            1) Sorting is possible on the following fields:
                - vnfInstanceName
                - vnfProvider
                - vnfProductName
                - vnfSoftwareVersion
                - vnfdVersion
                - clusterName
                - instantiationState
            2) This parameter may be used multiple times. Examples:
                - sort=vnfProvider
                - sort=vnfProvider,desc
                - sort=vnfProvider,desc&sort=vnfProductName,asc
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - vnfInstanceName
                - vnfInstanceName,asc
                - vnfInstanceName,desc
                - vnfProvider
                - vnfProvider,asc
                - vnfProvider,desc
                - vnfProductName
                - vnfProductName,asc
                - vnfProductName,desc
                - vnfSoftwareVersion
                - vnfSoftwareVersion,asc
                - vnfSoftwareVersion,desc
                - vnfdVersion
                - vnfdVersion,asc
                - vnfdVersion,desc
                - clusterName
                - clusterName,asc
                - clusterName,desc
                - instantiationState
                - instantiationState,asc
                - instantiationState,desc
          required: false
        - name: type
          description: |
            If both CVNFM and VM-VNFM are deployed, this query helps to retrieve only 
            CNF or VNF operations from all VNF LCM operation occurrences.
          in: query
          schema:
            type: string
            enum:
              - CNF
              - VNF
          required: false
      operationId: getAllVnfInstances
      responses:
        '200':
          description: |
            OK - Information about zero or more VNF instances was queried
            successfully. The response body shall contain representations of
            zero or more VNF instances.
          headers:
            Content-Type:
              description: The MIME type of the body of the response.
              schema:
                type: string
            Link:
              description: >
                Reference to other resources. Used for paging in the present
                document.
              schema:
                type: string
                maximum: 1
                minimum: 0
            PaginationInfo:
              description: >
                Page information of result set, includes
                  number - the returned page number
                  size - the number of results returned in the page
                  totalPages - the total number of pages for the query
                  totalElements - the total number of elements for the query
              schema:
                type: string
                maximum: 1
                minimum: 0
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VnfInstanceResponse'
        '400':
          $ref: '#/components/responses/BadRequestQuery'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'
  '/vnf_instances/{vnfInstanceId}':
    parameters:
      - name: Accept
        description: |
          Content-Types that are acceptable for the response.
        in: header
        required: true
        schema:
          type: string
      - name: vnfInstanceId
        description: |
          Identifier of the VNF instance. This identifier can be retrieved from
          the resource referenced by the "Location" HTTP header in the response
          to a POST request creating a new VNF instance resource. It can also be
          retrieved from the "id" attribute in the payload body of that
          response.
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - VNF Instance Operations
      summary: Query VNF
      description: Use this GET method to retrieve information about a VNF instance by reading an individual VNF instance resource.
      operationId: getVnfInstanceById
      responses:
        '200':
          description: |
            OK - Information about an individual VNF instance was read successfully.
            The response body shall contain a representation of the VNF instance.
          headers:
            Content-Type:
              description: The MIME type of the body of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VnfInstanceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      tags:
        - VNF Instance Operations
      summary: Delete VNF Identifier
      description:
        Use this method to delete an individual VNF instance resource.
        **Note:** Perform cleanup operation or cleanup resources from the cluster manually when
        executing Delete VNF Identifier after a failed Instantiate operation.
      parameters:
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      operationId: deleteVnfInstanceById
      responses:
        '204':
          description: |
            NO CONTENT - The VNF instance resource and the associated VNF identifier were deleted successfully.
            The response body is empty.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    patch:
      tags:
        - VNF Instance Operations
      summary: Modify VNF Identifiers
      description: Use this method to modify an individual VNF instance resource.
      parameters:
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: |
          Parameters for the scale VNF operation.
          **Note** Provide parameters only for those you intend to modify, as it prevents the inclusion of empty values.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VnfInfoModificationRequest'
      operationId: patchVnfInstanceById
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vnf_instances/{vnfInstanceId}/instantiate':
    parameters:
      - name: vnfInstanceId
        description: |
          Identifier of the VNF instance. This identifier can be retrieved from
          the resource referenced by the "Location" HTTP header in the response
          to a POST request creating a new VNF instance resource. It can also be
          retrieved from the "id" attribute in the payload body of that
          response.
        in: path
        required: true
        schema:
          type: string
          pattern: '[a-z0-9]+(-[a-z0-9]+)*'
    post:
      tags:
        - VNF Instance Operations
      summary: Instantiate VNF
      description: Use this POST method to instantiate a VNF instance.
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the VNF instantiation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantiateVnfRequest'
      operationId: instantiateVnfInstance
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vnf_lcm_op_occs':
    get:
      tags:
        - VNF Lifecycle Operations
      summary: Get Operation Status
      description: >
        Use this GET method to retrieve a list of VNF LCM operation occurrences.
        
        1) **NOTE:** In co-deployed environment (when both CVNFM and VM VNFM deployed) API call will be forwarded to CVNFM and VM VNFM,
            response will be merged. The following must be considered:
          
          - API response for CNFs and VM VNFs may have some differences because CVNFM and VM VNFM have different capabilities. This section 
            describes CVNFM capabilities; for VM VNFM capabilities refer to: "Or-Vnfm API v1 Documentation", "Or-Vnfm API v2 Documentation".
          
          - Responses from CVNFM and VM VNFM will be merged according to the following principle: the system will first return instances from the 
            CVNFM, followed by instances from the VM VNFM. **Example:** When the page size is set to 10, the system will return 10 instances
            from the CVNFM, and this process will continue until all instances in the CVNFM have been returned.
            It is possible that the last page may be incomplete. Subsequently, the system will return 10 instances from the VM VNFM,
            and this process will also continue until all instances in the VM VNFM have been returned.

        2) When both the CVNFM and VM VNFM are deployed, after making initial call GET /vnf_lcm_op_occs to navigate through multiple pages,
            consider utilizing the entries from the "link" section present in the response header:
                
            - "rel="first" link marked with this entry will direct you to the initial paginated page.
            - "rel="self" link indicates your current position within the pagination pages.
            - "rel="next" link will guide you to the next paginated page (this can be empty if it is the last page).

        3) Be aware that during pagination, the "nextpage_opaque_marker" can provide information about the type of VNF LCM operations
        you you will be receiving in the response. If nextpage_opaque_marker=cvnfm it signifies that you are receiving only CVNFM LCM operations.
        Conversely, if nextpage_opaque_marker=vmvnfm it indicates that you are receiving only VM VNFM LCM operations.

      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: filter
          description: |
            1) Attribute-based filtering expression.
                The VNFM supports receiving this parameter as part of the URI query string. The NFVO might supply this parameter.
                All attribute names that appear in the VnfLcmOpOcc and in data types referenced from the parameter are supported by the VNFM in the 
                filter expression. The following list of operators are supported:
                  - cont - Contains
                  - ncont - Not contain
                  - eq - Equal
                  - neq - Not equal
                  - in - In
                  - nin - Not in
                  - gt - Greater then
                  - gte - Greater then, or equals
                  - lt - Less then
                  - lte - Less then, or equals
            
            2) **Examples:**
                  * vnf_lcm_op_occs?filter=(eq,stateEnteredTime,2021-05-28T16:20:24.49)
                  * vnf_lcm_op_occs?filter=(lt,stateEnteredTime,2021-05-28T16:20:24.49)
                  * vnf_lcm_op_occs?filter=(neq,lifecycleOperationType,TERMINATE)
          in: query
          required: false
          schema:
            type: string
        - name: nextpage_opaque_marker
          description: |
            Marker to obtain the next page of a paged response. This is generated by EVNFM as part of the Link response header for a query request,
            and should not be generated, modified or interpreted by any client.
            1) **Examples (for codeploy):**
                - nextpage_opaque_marker=cvnfm-<subtoken>
                - nextpage_opaque_marker=vmvnfm-<subtoken>
                
            2) **Examples (for standalone setup):**
                - nextpage_opaque_marker=<subtoken>
        
            3) The value of the <subtoken> can vary depending on the type of the request:
                * For codeploy and requests for CVNFM, its value should be an integer.
                * For requests to VM VNFM, its value should be in the form of a timestamp (for example, "2024-04-04T13:54:37Z").
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: |
            The number of items per page. The default value is 15. Should be a positive number no greater than 100. 
            When both the CVNFM and VM VNFM are deployed, the size parameter is interpreted as the max number of VNFs in the response, 
            there can be pages that are shorter than the size described here, followed by other packages.
          in: query
          required: false
          schema:
            type: integer
        - name: sort
          description: |
            Sorting definition in form 'field[,direction]' where
            direction is asc or desc, defaulting to asc.
            Direction for the fields with date or time defaults to desc.
            1) Sorting is possible on the following fields: 
                - stateEnteredTime
                - startTime
                - operationState
                - lifecycleOperationType
                - vnfInstance
            2) This parameter may be used multiple times. Examples:
                * sort=vnfInstance
                * sort=vnfInstance,asc
                * sort=vnfInstance,desc&sort=stateEnteredTime,desc
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - stateEnteredTime
                - stateEnteredTime,asc
                - stateEnteredTime,desc
                - startTime
                - startTime,asc
                - startTime,desc
                - operationState
                - operationState,asc
                - operationState,desc
                - lifecycleOperationType
                - lifecycleOperationType,asc
                - lifecycleOperationType,desc
                - vnfInstance
                - vnfInstance,asc
                - vnfInstance,desc
        - name: type
          description: |
            If both CVNFM and VM-VNFM are deployed, this query helps to retrieve only CNF or VNF operations from all VNF LCM operation occurrences.
          in: query
          schema:
            type: string
            enum:
              - CNF
              - VNF
          required: false
      operationId: getAllLifecycleManagementOperations
      responses:
        '200':
          description: |
            OK - Information about an individual VNF instance was read successfully.
            The response body contains a representation of the VNF instance.
          headers:
            Content-Type:
              description: The MIME type of the body of the response.
              schema:
                type: string
            Link:
              description: >
                Reference to other resources. Used for paging in the present document.
              schema:
                type: string
                maximum: 1
                minimum: 0
            PaginationInfo:
              description: >
                1) Page information of result set, includes:
                  - number - the returned page number
                  - size - the number of results returned in the page
                  - totalPages - the total number of pages for the query
                  - totalElements - the total number of elements for the query.
                2) **Note:** Not present when both CVNFM and VM VNFM are deployed.
              schema:
                type: string
                maximum: 1
                minimum: 0
          content:
            application/json:
              schema:
                description: >
                  This type represents a VNF lifecycle management operation
                  occurrence.
                type: array
                items:
                  $ref: '#/components/schemas/VnfLcmOpOcc'
        '400':
          $ref: '#/components/responses/BadRequestQuery'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vnf_lcm_op_occs/{vnfLcmOpOccId}':
    parameters:
      - name: vnfLcmOpOccId
        description: >
          Identifier of a VNF lifecycle management operation occurrence. This
          identifier can be retrieved from the resource referenced by the
          "Location" HTTP header in the response to a PATCH or POST request
          triggering a VNF LCM operation. It can also be retrieved from the
          "vnfLcmOpOccId" attribute in the VnfLcmOperationOccurrenceNotification.
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - VNF Lifecycle Operations
      summary: Get VNF Life Cycle Management operation
      description: >
        Use this GET method to retrieve status information about a VNF Life Cycle Management (LCM) operation occurrence by reading an
        individual VNF-LCM operation occurrence resource.
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
      operationId: getLifecycleManagementOperationById
      responses:
        '200':
          description: |
            OK - Information about an individual VNF instance was read successfully.
            The response body contains a representation of the VNF instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VnfLcmOpOcc'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vnf_lcm_op_occs/{vnfLcmOpOccId}/rollback':
    parameters:
      - name: vnfLcmOpOccId
        description: |
          Identifier of a VNF lifecycle management operation occurrence to be
          be rolled back. This identifier can be retrieved from the resource
          referenced by the "Location" HTTP header in the response to a PATCH
          or POST request triggering a VNF LCM operation. It can also be
          retrieved from the "vnfLcmOpOccId" attribute in the
          VnfLcmOperationOccurrenceNotification.
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - VNF Lifecycle Operations
      summary: Rollback a VNF Life Cycle Management operation
      description:
        Use this POST method to rollback a VNF Life Cycle Management (LCM) operation occurrence from a FAILED_TEMP state.
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      operationId: rollbackLifecycleManagementOperationById
      responses:
        '202':
          $ref: '#/components/responses/AcceptedWithEmptyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vnf_lcm_op_occs/{vnfLcmOpOccId}/fail':
    parameters:
      - name: vnfLcmOpOccId
        description: |
          Identifier of a VNF lifecycle management operation occurrence to be
          be marked as "failed". This identifier can be retrieved from the
          resource referenced by the "Location" HTTP header in the response to
          a PATCH or POST request triggering a VNF LCM operation. It can also
          be retrieved from the "vnfLcmOpOccId" attribute in the
          VnfLcmOperationOccurrenceNotification.
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - VNF Lifecycle Operations
      summary: Update a VNF LCM operation occurrence to a FAILED state
      description:
        Use this POST method to update a VNF LCM operation occurrence to a FAILED state.
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      operationId: failLifecycleManagementOperationById
      responses:
        200:
          description: |
            OK - Information about an individual VNF instance was read successfully.
            The response body contains a representation of the VNF instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VnfLcmOpOcc'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vnf_instances/{vnfInstanceId}/terminate':
    parameters:
      - name: vnfInstanceId
        description: |
          The identifier of the VNF instance to be terminated. This identifier
          can be retrieved from the resource referenced by the "Location" HTTP
          header in the response to a POST request creating a new VNF instance
          resource. It can also be retrieved from the "id" attribute in the
          payload body of that response.
        in: path
        required: true
        schema:
          type: string
          pattern: '[a-z0-9]+(-[a-z0-9]+)*'
    post:
      tags:
        - VNF Instance Operations
      summary: Terminate VNF
      description: Use this POST method to terminate a VNF instance.
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the VNF termination.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TerminateVnfRequest'
      operationId: terminateVnfInstanceById
      responses:
        '202':
          $ref: '#/components/responses/AcceptedWithContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vnf_instances/{vnfInstanceId}/change_package_info':
    parameters:
      - name: vnfInstanceId
        description: |
          The identifier of the VNF instance to be changed. This identifier
          can be retrieved from the resource referenced by the "Location" HTTP
          header in the response to a POST request creating a new VNF instance
          resource. It can also be retrieved from the "id" attribute in the
          payload body of that response.
        in: path
        required: true
        schema:
          type: string
          pattern: '[a-z0-9]+(-[a-z0-9]+)*'
    post:
      tags:
        - VNF Instance Operations
      deprecated: true
      summary: ChangePackageInfo VNF
      description: |
        The POST method changes a VNF instance.
      requestBody:
        description: Parameters for the VNF change package info.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePackageInfoVnfRequest'
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      operationId: changeVnfInstancePackageInfoById
      responses:
        '202':
          $ref: '#/components/responses/AcceptedWithContent'
        '400':
          $ref: '#/components/responses/Unauthorized'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vnf_instances/{vnfInstanceId}/change_vnfpkg':
    parameters:
      - name: vnfInstanceId
        description: |
          Identifier of the VNF instance. This identifier can be retrieved from
          the resource referenced by the "Location" HTTP header in the response
          to a POST request creating a new VNF instance resource. It can also be
          retrieved from the "id" attribute in the payload body of that
          response.
        in: path
        required: true
        schema:
          type: string
          pattern: '[a-z0-9]+(-[a-z0-9]+)*'
    post:
      tags:
        - VNF Instance Operations
      summary: ChangePackageInfo VNF
      description: |
        Use this POST method to change a VNF instance package.
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the VNF change package info.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeCurrentVnfPkgRequest'
      operationId: changeVnfPkgForVnfInstanceById
      responses:
        '202':
          $ref: '#/components/responses/AcceptedWithContent'
        '400':
          $ref: '#/components/responses/Unauthorized'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vnf_instances/{vnfInstanceId}/scale':
    parameters:
      - name: vnfInstanceId
        description: |
          Identifier of the VNF instance. This identifier can be retrieved from
          the resource referenced by the "Location" HTTP header in the response
          to a POST request creating a new VNF instance resource. It can also be
          retrieved from the "id" attribute in the payload body of that
          response.
        in: path
        required: true
        schema:
          type: string
          pattern: '[a-z0-9]+(-[a-z0-9]+)*'
    post:
      tags:
        - VNF Instance Operations
      summary: Scale VNF
      description: Use this POST method to scale a VNF instance.
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the scale VNF operation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScaleVnfRequest'
      operationId: scaleVnfInstanceById
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vnf_instances/{vnfInstanceId}/addNode':
    post:
      tags:
        - VNF Instance Operations
      summary: Add a Node to ENM
      description: The POST method adds the node to ENM.
      requestBody:
        description: Additional parameters needed to add the node to ENM.
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                ossTopology.managedElementId:
                  description: >
                    The same as the NetworkElement Managed Object (MO) name.
                    This matches the MeContext MO name, if it exists, and is case sensitive.
                    Some characters are restricted in ENM system models. These cannot be used in the *networkElementId* attribute.
                    The following characters cannot be used:
                      - *=,%{}<>:"/\|?*
                      - *All ASCII characters below or equal to hexadecimal 1F* 

                    If no value is provided, a combination of <cluster-name>-<namespace>-<vnf Instance name> is set for this parameter.
                  type: string
                ossTopology.timeZone:
                  description: >
                    The local time zone of the node
                    Use the following command to get the appropriate value:
                    ```cmedit describe NetworkElement.timeZone in ENM ```
                  type: string
                ossTopology.networkElementType:
                  description: >
                    The network element type.
                      - For **vSTP** nodes, provide vIP-STP.
                      - For **ESA** based nodes, provide GenericESA.
                      - For **vMSC** and **vMSC** high-capacity nodes, provide vMSC and vMSC-HC.
                  type: string
                ossTopology.networkElementVersion:
                  description: >
                    The version of the network element.
                    In ENM, this parameter refers to ossModelIdentity (for example, 16A-CP02) for non-AXE nodes and release for AXE based nodes.
                    It is mandatory depending on the networkElementType.
                  type: string
                ossTopology.networkElementUsername:
                  description: >
                    User name to access the VNF
                  type: string
                ossTopology.networkElementPassword:
                  description: >
                    Password to access the VNF.
                  type: string
                ossTopology.nodeIpAddress:
                  description: >
                    The O&M IP Address of the Network Element.
                    Not applicable for AXE compact nodes.
                  type: string
                ossTopology.communityString:
                  description: >
                    Community string for SNMP.
                    This value will be ignored if ossTopology.snmpVersion is empty or equals SNMP_V3. In this case ENM will set snmpReadCommunity
                    and snmpWriteCommunity for the node to default 'public'. Otherwise, if no value is specified – default 'enm-public' will be set
                    Not applicable for AXE based nodes.
                  type: string
                ossTopology.snmpPort:
                  description: >
                    SNMP port.
                    Not applicable for AXE based nodes.
                    **If a port is not provided, the default port 161 is set.**
                  type: string
                ossTopology.snmpVersion:
                  description: >
                    SNMP Version.
                    Not applicable for AXE based nodes.
                    For SNMP V3, it is mandatory to provide as SNMP_V3.
                  type: string
                ossTopology.snmpSecurityLevel:
                  description: >
                    Mandatory and applicable in case of SNMP V3.
                    It is the permitted level of security within a security model.
                    *ENM supports the following security levels:*
                      - AUTH_PRIV
                      - AUTH_NO_PRIV
                      - NO_AUTH_NO_PRIV 

                    **Note:** The security level NO_AUTH_PRIV is not supported.
                  type: string
                  enum:
                    - AUTH_PRIV
                    - AUTH_NO_PRIV
                    - NO_AUTH_NO_PRIV
                ossTopology.snmpSecurityName:
                  description: >
                    Mandatory and applicable in case of SNMP V3.
                    The security name for SNMP V3.
                  type: string
                ossTopology.snmpAuthProtocol:
                  description: >
                    Authentication protocol used to authorize the identity of user.
                    Not applicable for AXE based nodes.
                    If not provided, it is defaulted to MD5.
                    Applicable if SNMP V3 is used and the security level is AUTH_NO_PRIV or AUTH_PRIV.
                    *Example values*: MD5, SHA1.
                  type: string
                ossTopology.snmpPrivProtocol:
                  description: >
                    Privacy Protocol used for encryption of SNMP v3 messages to ensure confidentiality of data.
                    Not applicable for AXE based nodes. If not provided, it is defaulted to AES128 for ENM.
                    Applicable if SNMP V3 is used and the security level is AUTH_PRIV.
                    *Example values for ENM*: AES128, DES.
                  type: string
                ossTopology.snmpAuthPassword:
                  description: >
                    Password set for authentication with the provided Authentication Protocol for secure authorization.
                  type: string
                ossTopology.snmpPrivacyPassword:
                  description: >
                    Password set for authentication with the provided Privacy Protocol for secure authorization.
                  type: string
                ossTopology.pmFunction:
                  description: >
                    PmFunction is used to switch on and off PMIC Mediation flows for each Network Element.
                    If PmFunction is on, all file collection, subscription activation, subscription deactivation, scanner polling, and scanner main
                    functionality is available for the Network Element.
                    **Defaulted to false**
                  type: boolean
                ossTopology.cmNodeHeartbeatSupervision:
                  description: >
                    Enabling CM Supervision copies the current status of the configuration data of the node into ENM and enables CM Notifications.
                    Enabling CM Notifications ensures that the node notifies ENM of any configuration data changes.
                    **Defaulted to true**
                  type: boolean
                ossTopology.fmAlarmSupervision:
                  description: >
                    FmAlarmSupervision is used to enable or disable alarms in case of any failures.
                    **Defaulted to true**
                  type: boolean
                ossTopology.netConfPort:
                  description: >
                    NetConf port number.
                    **If not provided, the default port number 830 must be set.**
                    Not applicable for AXE based nodes.
                    For example, for vEPG it would be 830, and for vMME it would be 22.
                  type: string
                ossTopology.subNetworks:
                  description: >
                    SubNetwork is used for logical grouping of nodes within ENM.
                    It can contain one or more child subnetwork.
                    *For example:*
                      - If only one subNetwork, then the format is: SubNetwork=CL.
                      - If more than one child SubNetwork, the format is SubNetwork=CL,SubNetwork=COMS. That is SubNetwork has to be separated by a comma (,).
                  type: string
                ossTopology.transportProtocol:
                  description: >
                    Possible values are: SSH and TLS.
                    **Defaulted to SSH**
                  type: string
              required:
                - ossTopology.networkElementType
                - ossTopology.networkElementUsername
                - ossTopology.networkElementPassword
                - ossTopology.nodeIpAddress
                - ossTopology.netConfPort
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
        - name: vnfInstanceId
          description: |
            Identifier of the VNF instance. This identifier can be retrieved from
            the resource referenced by the "Location" HTTP header in the response
            to a POST request creating a new VNF instance resource. It can also be
            retrieved from the "id" attribute in the payload body of that
            response.
          in: path
          required: true
          schema:
            type: string
            pattern: '[a-z0-9]+(-[a-z0-9]+)*'
      operationId: addNodeToVnfInstanceById
      responses:
        '200':
          $ref: '#/components/responses/BasicOk'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '409':
          $ref: '#/components/responses/Conflict'
  '/vnf_instances/{vnfInstanceId}/deleteNode':
    post:
      tags:
        - VNF Instance Operations
      summary: Delete a Node from ENM
      description: |
        Use this POST method to remove a node from Ericsson Network Manager (ENM).
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
        - name: vnfInstanceId
          description: |
            Identifier of the VNF instance. This identifier can be retrieved from
            the resource referenced by the "Location" HTTP header in the response
            to a POST request creating a new VNF instance resource. It can also be
            retrieved from the "id" attribute in the payload body of that
            response.
          in: path
          required: true
          schema:
            type: string
            pattern: '[a-z0-9]+(-[a-z0-9]+)*'
      operationId: deleteNodeFromVnfInstanceById
      responses:
        '200':
          $ref: '#/components/responses/BasicOk'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '409':
          $ref: '#/components/responses/Conflict'
  '/vnf_instances/{vnfInstanceId}/heal':
    parameters:
      - name: vnfInstanceId
        description:
          Identifier of the VNF instance. This identifier can be retrieved from
          the resource referenced by the "Location" HTTP header in the response
          to a POST request creating a new VNF instance resource. It can also be
          retrieved from the "id" attribute in the payload body of that
          response.
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - VNF Instance Operations
      summary: Heal VNF instance resource
      description: The POST method requests to heal a VNF instance resource.
      parameters:
        - name: Accept
          description: >
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Content-Type
          description: >
            The MIME type of the body of the request.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the Heal VNF operation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HealVnfRequest'
      operationId: healVnfInstanceById
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/clusterconfigs':
    parameters:
      - name: Accept
        description: |
          Content-Types that are acceptable for the response.
          **Note:** This value must be application/json
        in: header
        required: true
        schema:
          type: string
    post:
      tags:
        - Cluster Configs
      summary: Register a new configuration file
      description:
        Use this POST method to register a new configuration file. Name should be unique; config file should be valid k8s config.
      parameters:
        - name: Content-Type
          description:
            The MIME type of the body of the request.
            **Note:** This value must be multipart/form-data
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                clusterConfig:
                  description: >
                    Cluster configuration file.
                  type: string
                  format: binary
                description:
                  description: Description of a cluster configuration file. Description should not be longer than 250 characters.
                  type: string
                crdNamespace:
                  description: Namespace where CRD charts are installed.
                  type: string
                  default: eric-crd-ns
                isDefault:
                  description: | 
                    Marker that shows if the cluster is used as default.
                    **Note:** First registered cluster will be marked as "isDefault",
                    flag can be moved to another cluster using PUT or PATCH APIs
                  default: false
                  type: boolean
              required:
                - clusterConfig
      operationId: registerClusterConfigFile
      responses:
        '201':
          description:
            CREATED - A new config file was registered successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterConfigResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Cluster Configs
      summary: Fetch registered cluster configurations
      description: |
        Use this GET method to fetch a list of registered cluster configurations.
      parameters:
        - name: filter
          description: |
            1) Attribute-based filtering.
                The following list of fields are supported:
                  - name
                  - status 
                The following list of operators are supported:
                  - cont - Contains  
                  - eq - Equal
                  - neq - Not equal
            2) **Examples:**
              - clusterconfigs?filter=(cont,name,te)
              - clusterconfigs?filter=(eq,name,test.config)%3B(neq,status,IN_USE)

            3) **Note:** If multiple filter attributes are listed (for example, (eq,name,test.config)%3B(neq,status,NOT_IN_USE)),
                  they are logically connected with an AND operator, so the attributes must be of equal value.
          in: query
          required: false
          schema:
            type: string
        - name: getAllConfigs
          description: >
            Display all configs in one request without pagination. Defaults to false
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: page
          description: |
            Requested page number. Should be a positive number starting from 1.
          in: query
          required: false
          schema:
            type: integer
        - name: size
          description: |
            Size of a page. Should be a positive number.
          in: query
          required: false
          schema:
            type: integer
        - name: sort
          description: |
            Sorting definition in form 'field[,direction]' where
            direction is asc or desc, defaulting to asc.
            1) Sorting is possible on the following fields:
                - name
                - status
                - crdNamespace
            2) This parameter may be used multiple times. Examples:
                - sort=name
                - sort=status,desc
                - sort=status,desc&sort=name,asc
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - name
                - name,asc
                - name,desc
                - status
                - status,asc
                - status,desc
                - crdNamespace,
                - crdNamespace,asc
                - crdNamespace,desc
          required: false
      operationId: getAllClusterConfigs
      responses:
        '200':
          description: |
            OK - Information about zero or more cluster configs was queried successfully.
            The response body contains representations of zero or more cluster configs.
          headers:
            Content-Type:
              description: The MIME type of the body of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedClusterConfigsResponse'
  '/clusterconfigs/{clusterConfigName}':
    parameters:
      - name: clusterConfigName
        description: Name of the file that is used when registering new cluster configuration.
        in: path
        required: true
        schema:
          type: string
      - name: Accept
        description: |
          Content-Types that are acceptable for the response.
          **Note:** This value must be application/json
        in: header
        required: true
        schema:
          type: string
    put:
      tags:
        - Cluster Configs
      summary: Update registered cluster config file
      description: Use this PUT method to update registered cluster config file, description or isDefault flag.
      parameters:
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be multipart/form-data
          in: header
          required: true
          schema:
            type: string
        - name: skipSameClusterVerification
          description: Flag indicating whether to bypass verification that config belongs to same cluster
          in: query
          required: false
          schema:
            type: boolean
            default: false
      operationId: updateClusterConfigByName
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                clusterConfig:
                  type: string
                  format: binary
                  description: >
                    Cluster configuration file.
                description:
                  description: Description of cluster configuration file. Description should not be longer than 250 characters.
                  type: string
                isDefault:
                  description: Flag indicating whether if this cluster should be used as default.
                  default: false
                  type: boolean
              required:
                - clusterConfig
      responses:
        '200':
          description: Cluster config file was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterConfigResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Cluster Configs
      summary: Update registered cluster configuration files
      description: |
        Use this PATCH method to update registered cluster configuration files.
      parameters:
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be application/merge-patch+json
          in: header
          required: true
          schema:
            type: string
        - name: skipSameClusterVerification
          description: Flag indicating whether to bypass verification that config belongs to the same cluster.
          in: query
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        description: Fields to be changed in following rules from RFC 7386 JSON Merge Patch.
        required: true
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/ClusterConfigPatchRequest'
      operationId: updateClusterConfigPartiallyByName
      responses:
        '200':
          description: Cluster configuration was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterConfigResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Cluster Configs
      summary: Delete registered cluster configuration files
      description: Use this DELETE method to deregister the cluster configuration file.
      parameters:
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      operationId: deregisterClusterConfigByName
      responses:
        '204':
          description: |
            NO CONTENT - A cluster config file was deregistered successfully.
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '409':
          $ref: '#/components/responses/Conflict'
  '/clusterconfignames':
    get:
      tags:
        - Cluster Config Names
      summary: Fetch list of cluster names
      operationId: getAllClusterConfigNames
      responses:
        '200':
          description: List with registered cluster names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  '/vnf_instances/{vnfInstanceId}/cleanup':
    post:
      tags:
        - VNF Instance Operations
      summary: Clean up the resources of a VNF
      description: |
        Use this POST method to clean up the resources of a VNF after a failed instantiate request or terminate request.
        **Note:** The cleanup removes the PVC and PV only when those resources have the Kubernetes instance label 
              (app.kubernetes.io/instance: <RELEASE_NAME>)
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: false
          schema:
            type: string
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
        - name: vnfInstanceId
          description: |
            Identifier of the VNF instance. This identifier can be retrieved from
            the resource referenced by the "Location" HTTP header in the response
            to a POST request creating a new VNF instance resource. It can also be
            retrieved from the "id" attribute in the payload body of that
            response.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the VNF cleanup
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CleanupVnfRequest'
      operationId: cleanUpResourcesForVnfInstanceById
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vnf_instances/{vnfInstanceId}/values':
    parameters:
      - name: vnfInstanceId
        description: |
          Identifier of the VNF instance. This identifier can be retrieved from
          the resource referenced by the "Location" HTTP header in the response
          to a POST request creating a new VNF instance resource. It can also be
          retrieved from the "id" attribute in the payload body of that
          response.
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - VNF Instance Operations
      summary: Get values associated with the VNF
      description: >
        The GET method reads the latest values associated with the VNF and returns
        a single file comprising all the latest values.
      parameters:
        - name: Accept
          description: >
            Content-Types that are acceptable for the response.
            Permitted values: "text/plain;application/json"
            Passing in both allows for the exceptions that may be thrown and returned as a json object.
          in: header
          required: true
          schema:
            type: string
            enum:
              - text/plain
              - application/json
      operationId: getValuesForVnfInstanceById
      responses:
        '200':
          description: |
            OK - On success, the content of the values is returned. The payload body
            shall contain a copy of the file representing the latest values associated with the VNF
          headers:
            Content-Type:
              description: The MIME type of the body of the response.
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/vnf_instances/{vnfInstanceId}/backups':
    parameters:
      - name: vnfInstanceId
        description: |
          Identifier of the VNF instance. This identifier can be retrieved from
          the resource referenced by the "Location" HTTP header in the response
          to a POST request creating a new VNF instance resource. It can also be
          retrieved from the "id" attribute in the payload body of that
          response.
        in: path
        required: true
        schema:
          type: string
          pattern: '[a-z0-9]+(-[a-z0-9]+)*'
    post:
      tags:
        - VNF Instance Operations
      summary: Back up a VNF instance
      description: |
        Use this POST method to back up a VNF instance.
      requestBody:
        description: Parameters for the VNF to create a backup
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBackupsRequest'
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      operationId: backupVnfInstanceById
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - VNF Instance Operations
      summary: Get list of all backups created
      description: >
        Use this GET method to return a list of all backups created.
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
      operationId: getAllBackupsForVnfInstanceById
      responses:
        '200':
          description: >
            OK - Information about all the backups that were queried
            successfully.
          content:
            application/json:
              schema:
                description: >
                  This type represents an array of backups for an instance
                type: array
                items:
                  $ref: '#/components/schemas/BackupsResponseDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/vnf_instances/{vnfInstanceId}/backups/{backupName}/{scope}':
    parameters:
      - name: vnfInstanceId
        description: |
          Identifier of the VNF instance. This identifier can be retrieved from
          the resource referenced by the "Location" HTTP header in the response
          to a POST request creating a new VNF instance resource. It can also be
          retrieved from the "id" attribute in the payload body of that
          response.
        in: path
        required: true
        schema:
          type: string
          pattern: '[a-z0-9]+(-[a-z0-9]+)*'
      - name: backupName
        description: |
          Name of the backup which needs to be deleted
        in: path
        required: true
        schema:
          type: string
      - name: scope
        description: |
          Scope of the backup.
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - VNF Instance Operations
      summary: Delete backup
      description: Use this DELETE method to delete a backup by name and scope.
      operationId: deleteBackupForVnfInstanceByInstanceIdAndBackupNameAndScope
      parameters:
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      responses:
        '204':
          description: |
            NO CONTENT - Backup was deleted. The response body will be empty.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  '/vnf_instances/{vnfInstanceId}/backup/scopes':
    parameters:
      - name: vnfInstanceId
        description: |
          Identifier of the VNF instance. This identifier can be retrieved from
          the resource referenced by the "Location" HTTP header in the response
          to a POST request creating a new VNF instance resource. It can also be
          retrieved from the "id" attribute in the payload body of that
          response.
        in: path
        required: true
        schema:
          type: string
          pattern: '[a-z0-9]+(-[a-z0-9]+)*'
    get:
      tags:
        - VNF Instance Operations
      summary: Get scope for the backup
      description: >
        Use this GET method to get the scope for the backup.
      parameters:
        - name: Accept
          description: >
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
            enum:
              - application/json
      operationId: getBackupScopesForVnfInstanceById
      responses:
        '200':
          description: |
            OK - Information about zero or more backups which are created. 
            The response body contains representations of zero or more backups present.
          headers:
            Content-Type:
              description: The MIME type of the body of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vnf_instances/{vnfInstanceId}/sync:
    parameters:
      - name: vnfInstanceId
        description: |
          Identifier of the VNF instance. This identifier can be retrieved from
          the resource referenced by the "Location" HTTP header in the response
          to a POST request creating a new VNF instance resource. It can also be
          retrieved from the "id" attribute in the payload body of that
          response.
        in: path
        required: true
        schema:
          type: string
          pattern: '[a-z0-9]+(-[a-z0-9]+)*'
    post:
      tags:
        - VNF Instance Operations
      summary: Synchronize single vnfInstance
      description: |
        Use this POST method to synchronize single vnfInstance.
      parameters:
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: The VNF sync parameters
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncVnfRequest'
      operationId: syncVnfInstanceById
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequestQuery'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /cism-cluster-data:
    get:
      tags:
        - Cism Cluster Data
      summary: Get list of CISM cluster data configurations
      description: |
        Use this GET method to fetch a list of registered CISM cluster data configurations.
      parameters:
        - name: page
          description: |
            Requested page number. Should be a positive number starting from 1.
          in: query
          required: false
          schema:
            type: integer
        - name: size
          description: |
            Size of a page. Should be a positive number greater than 0.
          in: query
          required: false
          schema:
            type: integer
      operationId: getCismClusterConfigsData
      responses:
        '200':
          description: |
            OK
            Information about zero or more cluster configs was queried successfully.
            The response body contains representations of zero or more cluster configs.
          headers:
            Content-Type:
              description: The MIME type of the body of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedCismClusterConfigsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  responses:
    BasicOk:
      description: |
        OK - The request has succeeded.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
    Accepted:
      description: |
        ACCEPTED - The request was accepted for processing, but the processing has not
        been completed. The response body shall be empty. The HTTP response
        shall include a "Location" HTTP header that contains the URI of the
        newly-created "VNF LCM operation occurrence" resource corresponding
        to the operation.
      headers:
        Location:
          description: The resource URI of the created VNF LCM operation occurrence Id.
          schema:
            type: string
            format: url
    AcceptedWithContent:
      description: |
        ACCEPTED - The request was accepted for processing, but the processing has not
        been completed.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
        Location:
          description: The resource URI of the created VNF LCM operation occurrence Id.
          schema:
            type: string
            format: url
    AcceptedWithEmptyResponse:
      description: |
        ACCEPTED - The request was accepted for processing, but processing has not been completed.
        The response shall have an empty payload body.
    BadRequest:
      description: |
        Bad Request
        The API producer returns this response code in the following scenarios:
           - If the request is malformed or syntactically incorrect (for example, if the request URI contains incorrect query parameters or a 
              syntactically incorrect payload body). The ProblemDetails structure is provided, and includes in the detail attribute more 
              information about the source of the problem.
           - If the request contains a malformed access token. The ProblemDetails structure may be provided.
           - If there is an application error related to the client’s input that cannot be easily mapped to any other HTTP response code (a catch-all
              error). The ProblemDetails structure is provided, and includes in the detail attribute more information about the source of the problem.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    BadRequestQuery:
      description: |
        Bad Request
          - Invalid attribute-based filtering expression. The response body contains a ProblemDetails structure,
            in which the detail attribute conveys more information about the error.
          - Invalid attribute selector The response body contains a ProblemDetails structure,
            in which the detail attribute conveys more information about the error.
          - Response too big. If the VNFM supports alternative 1 (error) for this resource.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    Unauthorized:
      description: |
        UNAUTHORIZED - Status code indicates that the request has not been applied because 
        it lacks valid authentication credentials for the target resource. The ProblemDetails structure is provided.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    Forbidden:
      description: |
        FORBIDDEN - If the API consumer is not allowed to perform a particular request to a particular resource,
        the API producer responds with this response code. The ProblemDetails structure is provided.
        If the request contains no access token even though one is required, or if the request contains an authorization token 
        that is invalid (for example, expired or revoked), the API producer responds with this response.
        "Detail" attribute information about the source of the problem, and may indicate how to solve it.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    NotFound:
      description: |
        NOT FOUND - If the API producer did not find a current representation for the resource addressed by the URI passed in the request,
        or is not willing to disclose that one exists, it responds with this response code. The ProblemDetails structure is provided,
        including in the detail attribute information about the source of the problem, for example, a wrong resource URI variable.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    MethodNotAllowed:
      description: |
        METHOD NOT ALLOWED - The API producer returns this response code in the following scenarios:
        - If a particular HTTP method is not supported for a resource, the API producer responds with this response code.
          The ProblemDetails structure may be omitted.
        - If there is no valid EVNFM license present in NeLS. The ProblemDetails structure is provided,
          and includes more information about the source of the problem in the detail attribute.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    NotAcceptable:
      description: |
        NOT ACCEPTABLE - If the "Accept" HTTP header does not contain at least one name of a
        content type that is acceptable to the API producer, the API
        producer shall respond with this response code. The "ProblemDetails"
        structure may be omitted in that case.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    Conflict:
      description: |
        CONFLICT - The API producer responds with this response code if another request is in progress that prohibits
        the fulfillment of the current request, or the current resource state is inconsistent with the request.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    PreconditionFailed:
      description: |
        PRECONDITION FAILED - The API producer responds with this response code if a precondition
        given in an HTTP request header is not fulfilled. Typically, this is due to an ETag mismatch,
        which indicates that the resource was modified by another entity. The response body contains a ProblemDetails structure,
        in which the detail attribute conveys more information about the error.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    PayloadTooLarge:
      description: |
        PAYLOAD TOO LARGE - If the payload body of a request is larger than the amount of data the API producer is willing or able to process,
        it responds with this response code. The ProblemDetails structure can be omitted.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    URITooLong:
      description: |
        URI TOO LONG - If the request URI of a request is longer than the API producer is willing or able to process, 
        it responds with this response code. This condition can, for example,
        be caused by passing long queries in the request URI of a GET request.
        The ProblemDetails structure can be omitted
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    RequestedRangeNotSatisfiable:
      description: |
        REQUESTED RANGE NOT SATISFIABLE - This code is returned if the requested byte range in the Range HTTP
        header is not present in the requested resource.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    UnprocessableEntity:
      description: |
        UNPROCESSABLE ENTITY - If the payload body of a request contains syntactically correct data (for example, well-formed JSON)
        but the data cannot be processed (for example, because it fails validation against a schema),
        the API producer responds with this response code. The ProblemDetails structure is provided and includes in the detail
        attribute more information about the source of the problem.
        **Note:** This error response code is only applicable for methods that have a request body.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    TooManyRequests :
      description: |
        TOO MANY REQUESTS - If global limit of concurrent LCM operations was reached, the API producer responds with this response code.
        LCM operation is called as concurrent if it is not in terminal states: FAILED, ROLLED_BACK or COMPLETED, FAILED_TEMP.
        The ProblemDetails structure is provided, and includes in the detail attribute more information about the source of the problem.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    InternalServerError:
      description: |
        INTERNAL SERVER ERROR - If there is an application error not related to the client’s input that
        cannot be easily mapped to any other HTTP response code (a catch-all error), the API producer responds with this response code.
        The ProblemDetails structure is provided, and includes in the detail attribute more information about the source of the problem.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    ServiceUnavailable:
      description: |
        SERVICE UNAVAILABLE - If the API producer encounters an internal overload situation of itself or of a system it relies on,
        it responds with this response code. The ProblemDetails structure may be omitted.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    GatewayTimeout:
      description: |
        GETAWAY TIMEOUT - If the API producer didn`t receive a timely response from another upstream
        server on which it relies on. The ProblemDetails structure may be omitted.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
  schemas:
    ProblemDetails:
      description: >
        The "status" and "detail" attributes are mandated to be included by the present
        document, to ensure that the response contains additional textual
        information about an error. It is possible that
        particular APIs in the present document, or particular
        implementations, define extensions to define additional attributes
        that provide more information about the error. The description
        column only provides some explanation of the meaning to Facilitate
        understanding of the design.
      type: object
      required:
        - status
        - detail
      properties:
        type:
          description: >
            A URI reference that identifies the problem type.
            It is encouraged that the URI provides human-readable documentation
            for the problem (e.g. using HTML) when de-referenced. 
            When this member is not present, its value is assumed to be "about:blank".
          type: string
          format: URI
        title:
          description: >
            A short, human-readable summary of the problem type. It should
            not change from occurrence to occurrence of the problem,
            except for purposes of localization. If type is given and
            other than "about:blank", this attribute shall also be
            provided. A short, human-readable summary of the problem
            type.
          type: string
        status:
          description: >
            The HTTP status code for this occurrence of the problem. The
            HTTP status code generated by the origin server for this 
            occurrence of the problem.
          type: integer
        detail:
          description: >
            A human-readable explanation specific to this occurrence of
            the problem.
          type: string
        instance:
          description: >
            A URI reference that identifies the specific occurrence of the
            problem. It may yield further information if de-referenced.
          type: string
          format: URI
    ResourceProviderId:
      description: >
        Identifies the entity responsible for the management of the virtualized resource.
        This attribute is supported when VNF-related resource management in indirect mode is applicable.
      type: string
    ResourceId:
      description: >
        An identifier maintained by the VIM or other resource
        provider. It is expected to be unique within the VIM
        instance.
      type: string
    VnfInstanceResponseLinks:
      description: |
        Links to resources related to this resource.
      type: object
      title: vnfInstanceResponseLinks
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/URILink'
        instantiate:
          $ref: '#/components/schemas/URILink'
        terminate:
          $ref: '#/components/schemas/URILink'
        change_vnfpkg:
          $ref: '#/components/schemas/URILink'
        scale:
          $ref: '#/components/schemas/URILink'
    URILink:
      description: |
        This type represents a link to a resource.
        type: object
      required:
        - href
      properties:
        href:
          description: |
            URI of the referenced resource.
          type: string
          format: url
    PaginationLinks:
      description: Links to first, previous, self, next, last pages of paginated results
      type: object
      required:
        - self
      properties:
        first:
          $ref: '#/components/schemas/URILink'
        prev:
          $ref: '#/components/schemas/URILink'
        self:
          $ref: '#/components/schemas/URILink'
        next:
          $ref: '#/components/schemas/URILink'
        last:
          $ref: '#/components/schemas/URILink'
    PaginationInfo:
      description: Page information of result set.
      type: object
      required:
        - number
        - size
        - totalPages
        - totalElements
      properties:
        number:
          description: Number of the current page
          type: integer
        size:
          description: Number of results per page
          type: integer
        totalPages:
          description: Total number of pages
          type: integer
        totalElements:
          description: Total number of results
          type: integer
    MacAddress:
      description: >
        A MAC address. Representation: string that consists of groups of two hexadecimal digits,
        separated by hyphens or colons.
      type: string
      format: MAC

    IpAddress:
      description: >
        An IPV4 or IPV6 address. Representation: In case of an IPV4 address, string that consists of four decimal
        integers separated by dots, each integer ranging from 0 to 255. In case of an IPV6 address, string that
        consists of groups of zero to four hexadecimal digits, separated by colons.
      type: string
      format: IP

    IpAddressesType:
      description: >
        The type of the IP addresses. Permitted
        values: IPV4, IPV6.
      type: string
      enum:
        - IPV4
        - IPV6

    AddressRangeType:
      description: >
        An IP address range used, e.g. in case of
        egress connections.
      type: object
      required:
        - minAddress
        - maxAddress
      properties:
        minAddress:
          description: Lowest IP address belonging to the range
          type: integer
        maxAddress:
          description: Highest IP address belonging to the range
          type: integer
    VnfLcmOpOccLinks:
      description: |
        Links to resources related to this resource.
        type: object
      required:
        - self
        - vnfInstance
      properties:
        self:
          $ref: '#/components/schemas/URILink'
        vnfInstance:
          $ref: '#/components/schemas/URILink'
        grant:
          $ref: '#/components/schemas/URILink'
        cancel:
          $ref: '#/components/schemas/URILink'
        retry:
          $ref: '#/components/schemas/URILink'
        rollback:
          $ref: '#/components/schemas/URILink'
        fail:
          $ref: '#/components/schemas/URILink'
    RequestWithAdditionalParams:
      type: object
      discriminator:
        propertyName: discriminatorProperty
      properties:
#       TODO: For now there is no way to set field as a discriminator and not to add it as ignored for deserialization.
#       I hope in near future this problem will be fixed and we will be able to get rid of this field.
#       Also readOnly was added to keep this field from appearing in the documentation, please don't remove it unless you know what you're doing.
        discriminatorProperty:
          description: This property should not be visible to customer and used only as workaround to keep additionalParams as not a discriminator
          type: string
          readOnly: true
        additionalParams:
          description: |
            This type represents a list of key-value pairs. The order of
            the pairs in the list is not significant. In JSON, a set of
            key-value pairs is represented as an object.
          type: object
    CleanupVnfRequest:
      description: |
        Additional params in Cleanup Vnf Request represents a list 
        of key-value pairs. The order of the pairs in the list 
        is not significant. In JSON, a set of
        key-value pairs is represented as an object.
    
        **The supported EVNFM additional parameters:**
    
        * **applicationTimeOut:** [OPTIONAL]
        The maximum time allocated for the application to instantiate.
        This is the maximum time required for the application regardless of the number of charts to be installed.
        When the request is sent, each command resolves its timeout based on how long is left in the overall applicationTimeOut.
        For multiple charts, each subsequent chart resolves its timeout from the remainder of the overall *applicationTimeOut*.
        *Defaulted* to 3600s
        ***Example:*** 2 charts with a timeout of 200 seconds.
        The first chart timeout is 200 seconds. If it completes within 50 seconds, the second chart is instantiated with a timeout of 150 seconds.
        **Note:** If *cleanUpResources* is specified and a chart fails; then *applicationTimeOut* is reset to its original value and used for
        the terminate operation.
        
        * **skipVerification:** [OPTIONAL]
        Flag indicating whether to bypass the Application Verification Checks.
        *Defaulted* to false

        * **skipJobVerification:** [OPTIONAL]
        Flag indicating whether to bypass verification of Pods created as part of Job.
        **Defaulted* to false
      type: object
      allOf:
        - $ref: '#/components/schemas/RequestWithAdditionalParams'
    CreateVnfRequest:
      type: object
      required:
        - vnfdId
        - vnfInstanceName
      properties:
        vnfdId:
          description: |
            Identifier that identifies the VNFD which defines the VNF instance to be created.
          type: string
          minLength: 1
          maxLength: 60
        vnfInstanceName:
          description: >
            Name of the VNF instance.
            Can not be modified when VNF Instance is in INSTANTIATED state
            Query individual VNF to see instantiationState in VnfInstanceResponse for current VNF state
            Minimum length: 1
            Pattern: "[a-z0-9]+(-[a-z0-9]+)*"
            Must be lower case letters and numbers. May be separated with dashes (-), like ordinary Helm Chart names.
            Neither uppercase letters nor underscores are used. Dots should not be used.
            **Examples:**
              - Valid names: vnf-instance-name2, vnf-instance-description2, vnf-45vnf-id
              - Invalid names: vnfInstanceName, vnf.instance.name, vnf_instance_description
          type: string
          minLength: 1
          maxLength: 50
          pattern: '[a-z]+([-]*[a-z0-9])*'
          x-pattern-message: 'must consist of lower case alphanumeric characters or -. It must start with an alphabetic character, and end with an alphanumeric character'
        vnfInstanceDescription:
          description: |
            Human-readable description of the VNF instance to be created.
          type: string
        metadata:
          description: >
            This type represents a list of key-value pairs. The order of
            the pairs in the list is not significant. In JSON, a set of
            key value pairs is represented as an object.
          type: object
    ExtLinkPorts:
      description: >
        This type represents an externally provided link port
        to be used to connect an external connection point to
        an external VL.
      type: object
      required:
        - id
        - resourceHandle
      properties:
        id:
          $ref: '#/components/schemas/Id'
        resourceHandle:
          $ref: '#/components/schemas/ResourceHandle'
    VnfExtCpData:
      description: >
        This type represents configuration information for
        external CPs created from a CPD.
      type: object
      required:
        - cpdId
      properties:
        cpdId:
          description: |
            The identifier of the CPD in the VNFD.
          type: string
        cpConfig:
          description: |
            Map of instance data that need to be configured on
            the CP instances created from the respective CPD.
            The key of the map which identifies the individual
            VnfExtCpConfig entries is of type "IdentifierInVnf"
            and is managed by the NFVO.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/VnfExtCpConfig"
    CpProtocolData:
      description: >
        Parameters for configuring the network
        protocols on the link port that connects the
        CP to a VL.  The following conditions apply
        to the attributes "linkPortId" and
        "cpProtocolData":  * The "linkPortId" and
        "cpProtocolData" attributes shall both be
        absent for the deletion of an existing external CP instance
          addressed by cpInstanceId.
        * At least one of these attributes shall be
        present for a
          to-be-created external CP instance or an existing external
          CP instance.
        * If the "linkPortId" attribute is absent,
        the VNFM shall create a
          link port.
        * If the "cpProtocolData" attribute is
        absent, the "linkPortId"
          attribute shall be provided referencing a pre-created link port,
          and the VNFM can use means outside the scope of the present
          document to obtain the pre-configured address information for the
          connection point from the resource representing the link port.
        * If both "cpProtocolData" and "linkportId"
        are provided, the API
          consumer shall ensure that the cpProtocolData can be used with the
          pre-created link port referenced by "linkPortId".
      type: object
      required:
        - layerProtocol
      properties:
        layerProtocol:
          description: |
            Identifier of layer(s) and protocol(s).
          type: string
          enum:
            - IP_OVER_ETHERNET
            - IP_FOR_VIRTUAL_CP
        ipOverEthernet:
          $ref: '#/components/schemas/IpOverEthernetAddressData'
        virtualCpAddress:
          $ref: '#/components/schemas/VirtualCpAddressData'
    NetAttDefResourceData:
      description: |
        The NetAttDefResourceData data type represents
        a network attachment definition resource
        which is used to connect one or multiple connection points
        to a secondary container cluster network realizing a VL.
      type: object
      required:
        - resourceHandle
      properties:
        netAttDefResourceId:
          description: |
            Identifier of this network attachment definition resource as provided by the entity that has created it.
          type: string
        resourceHandle:
          $ref: '#/components/schemas/ResourceHandle'
    VnfExtCpConfig:
      description: |
        This type represents an externally provided link port or network address
        information per instance of an external connection point. In case a link
        port is provided, the VNFM shall use that link port when connecting the
        external CP to the external VL. In a link port is not provided, the VNFM
        shall create a link port on the external VL, and use that link port to
        connect the external CP to the external VL.
        * NOTE: The following conditions apply to the attributes "linkPortId" and "cpProtocolData":
            1)  Void.
            2)  At least one of the "linkPortId" and "cpProtocolData" attributes shall be present for an external
                CP instance representing a sub-port that is to be created, or an external CP instance that is to be
                created by creating the corresponding VNFC or VNF instance during the current or a subsequent LCM
                operation, or for an existing external CP instance that is to be re-configured or added to a
                particular external virtual link.
            3)  If the "linkPortId" attribute is absent, the VNFM shall create a link port.
            4)  If the "cpProtocolData" attribute is absent, the "linkPortId" attribute shall be provided referencing
                a pre created link port, and the VNFM can use means outside the scope of the present document to obtain
                the pre-configured address information for the connection point from the resource representing
                the link port.
            5)  If both "cpProtocolData" and "linkportId" are provided, the API consumer shall ensure that the
                cpProtocolData can be used with the pre-created link port referenced by "linkPortId".
      type: object
      properties:
        parentCpConfigId:
          description: >
            Value of the key that identifies the  "VnfExtCpConfig" map entry which corresponds to the parent port of the
            trunk. Reference to the "VnfExtCpConfig" entry that corresponds to the parent port of the trunk. Only present
            in "VnfExtCpConfig" structures that provide configuration information for a CP which represents a sub-port in
            a trunk, and if parent ports are supported.
          type: string
        linkPortId:
          description: |
            Identifier of a pre-configured link port to which the external CP will be associated. 
          type: string
        createExtLinkPort:
          description: |
            Indicates to the VNFM the need to create a dedicated link port for the external CP.
          type: boolean
        netAttDefResourceId:
          type: array
          items:
            description: |
              Identifier of the "NetAttDefResourceData" structure
              that provides the specification of the interface to
              attach the external CP to a secondary container cluster network.
            type: string
        cpProtocolData:
          description: |
            Parameters for configuring the network protocols on the link port that connects the CP to a VL.
          type: array
          items:
            $ref: '#/components/schemas/CpProtocolData'
    InstantiateVnfRequest:
      description: |
        Additional params in Instantiate Vnf Request represents
        a list of key-value pairs. The order of the pairs
        in the list is not significant. In JSON, a set of
        key-value pairs is represented as an object.
        
        **The supported EVNFM additional parameters:**
        
        * **namespace:** [OPTIONAL]
        The namespace the application is to be deployed into. 
        **Note:** The same namespace cannot be selected as EVNFM or any Kubernetes initialized namespaces
                  (default, kube-system, kube-public, kube-node-lease) or cluster's crd namespace. If selected the request will be rejected.
        
        * **cleanUpResources:** [OPTIONAL]
        Removes the resources on the cluster that are associated with the application, including the Persistent Volume Claims (PVC) and Persistent Volumes (PV).
        **Defaulted to true.**
        This option also removes the namespace if no other VNF is instantiated within that namespace.
        **Note:** cleanUpResources removes the PVC and PV only when the resources have the Kubernetes instance label (app.kubernetes
        .io/instance: <RELEASE_NAME>).
        
        * **applicationTimeOut:** [OPTIONAL]
        The maximum time allocated for the application to instantiate.
        This is the maximum time required for the application regardless of the number of charts to be installed.
        When the instantiate request is sent, each command resolves its timeout based on how long is left in the overall applicationTimeOut. 
        For multiple charts, each subsequent chart resolves its timeout from the remainder of the overall applicationTimeOut.
        *Defaulted* to 3600s
        ***Example:*** 2 charts with a timeout of 200 seconds.
        The first chart timeout is 200 seconds. If it completes within 50 seconds, the second chart is instantiated with a timeout of 150 seconds.
        **Note:** If cleanUpResources is specified and a chart fails; then applicationTimeOut is reset to its original value and used 
                  for the terminate operation. 
        
        * **skipVerification:** [OPTIONAL]
        Flag indicating whether to bypass the application verification checks.
        If set, LCM operation will trigger helm operation on the cluster, but will not check for instantiated objects state and
        wait for them to get up and running. This flag cannot be set to true if CMPv2Enrollment and addNodeToOss are set to true,
        otherwise the request is considered a bad request. **Defaulted to false**
        **Note:** Setting skipVerification = true may lead to the absence of day0 secrets configuration during the pod instantiation process, 
        because secrets may be deleted before helm operation is actually completed.
        
        * **skipJobVerification:** [OPTIONAL]
        Flag indicating whether to bypass verification of Pods created as part of Job.
        **Defaulted to false**
        
        * **disableOpenapiValidation** [OPTIONAL]
        Flag indicating whether to validate rendered templates against the Kubernetes OpenAPI Schema.
        **Defaulted to true**
        
        * **helmWait:** [OPTIONAL]
        If set, waits until all pods, PVC, services, and minimum number of pods of a deployment are in a ready state before marking 
        the release as successful. The wait time resolves its timeout from the remainder of the overall applicationTimeOut.
        **Defaulted to false**
        
        * **retrieveUnsealKey** [OPTIONAL]
        Flag indicating whether to perform KMS interactions during instantiation.
        **Defaulted to true**
        
        * **helmNoHooks** [OPTIONAL]
        If set, adds --no-hooks to **helm** command
        **Defaulted to false**
        
        * **manoControlledScaling** [OPTIONAL]
        Flag that indicates how the scaling of the deployment is handled:
         - By the Kubernetes Horizontal Pod Autoscaler (HPA)
         - By EVNFM controlling the HPA through ScaleVnfRequests from the user.
        **Defaulted* to false**(which means the HPA handles scaling)*
        **Note:** If HPAs handle the scaling, then EVNFM does not know the current replica count. The HPA may have scaled the resources
        based on usage.
        
        * **helm_client_version** [OPTIONAL]
        Version used for Instantiate is used for all subsequent LCM operations.
        Defaulted at "3.8". Valid values: "3.8, "3.10", "3.12", "3.13", "3.14" and "latest" (latest supported by EVNFM, currently - 3.14).

        * **sitebasic.xml** [OPTIONAL]
        Sitebasic file is used for creating enrollment info file. If not provided, EVNFM generates it based on ossTopology additional parameters.
        
        * **ipVersion** [OPTIONAL]
        Required for LDAP configuration. If not provided, IPv4 is used as default protocol family.
        
        **Application specific values:**
        These parameters are optional and only required for certain situations. Values can be overwritten here.
        
          - **someKey**: **someValue** [OPTIONAL]
            A value to be overwritten,  e.g. es.timeout
      allOf:
        - $ref: '#/components/schemas/RequestWithAdditionalParams'
        - type: object
          properties:
            flavourId:
              description: |
                An identifier that is unique within a VNF descriptor.
              type: string
            instantiationLevelId:
              description: |
                An identifier that is unique within a VNF descriptor.
                **Note:** parameter is not supported on a full stack system, it is supported only in a small stack scenario
              type: string
            targetScaleLevelInfo:
              description: >
                Target scale level of each scaling aspect that should be applied during instantiation. One entry per scaling aspect.
                The target size for VNF instantiation may be specified in either instantiationLevelId or targetScaleLevelInfo, but not both.
                If none of the two attributes (instantiationLevelId or targetScaleLevelInfo) are present, the default instantiation
                level as declared in the VNFD will be used. If targetScaleLevelInfo is specified, information provided in targetScaleLevelInfo shall
                be used for instantiating scalable constituents of the VNF (e.g, VDUs). For scaling aspects not specified in targetScaleLevelInfo or
                for the VNF constituents (e.g.VDUs) that are not scalable, the default instantiation level as declared
                in the VNFD shall be used for instantiation.
              type: array
              items:
                $ref: '#/components/schemas/ScaleInfo'
            clusterName:
              description: >
                Cluster name where the VNF instance is to be instantiated
              type: string
              minLength: 1
              pattern: '[0-9a-zA-Z][0-9a-zA-Z-_]*(\.config)?$'
              x-pattern-message: 'must consist of alphanumeric characters, - or _. It must start with an alphanumeric character'
#       TODO: For now this property is part of the MR that are on hold https://jira-oss.seli.wh.rnd.internal.ericsson.com/browse/EO-142277
#       and shouldn't be visible for the customer in the documentation. That's why in order to hide it annotation "readOnly: true" exist.
            extVirtualLinks:
              description: Information about external VLs to connect the VNF to.
              type: array
              readOnly: true
              items:
                $ref: '#/components/schemas/ExtVirtualLinkData'
            extManagedVirtualLinks:
              $ref: '#/components/schemas/ExtManagedVirtualLinks'
            localizationLanguage:
              description: >
                Localization language of the VNF to be instantiated.
              type: string
            extensions:
              description: |
                This type represents a list of key-value pairs.
                The order of the pairs in the list is not significant.
                In JSON, a set of keyvalue pairs is represented as an object.
                
                **The supported EVNFM extensions:**
                  * **vnfControlledScaling** [OPTIONAL]
                  Overrides the controlled scaling methods specified in the VNFD.
    
                  * **deployableModules** [OPTIONAL]
                  Overrides status of the deployable modules specified in the VNFD.
                
                **Note:** parameter is not supported on a full stack system, it is supported only in a small stack scenario.
              type: object

    ScaleVnfRequest:
      description: |
        Additional parameters passed by the NFVO as input to the scaling process, specific to the VNF being scaled.
        This type represents a list of key-value pairs.
        The order of the pairs in the list is not significant.
        In JSON, a set of key-value pairs is represented as an object.
        
        **The supported EVNFM additional parameters:**
        
        * **applicationTimeOut:** [OPTIONAL]
          Maximum time allocated for the application to scale.
          **Defaulted to 3600s**
          This is the maximum time required for the application regardless of the number of charts to be installed.
          When the scale request is sent, each command resolves its timeout based on how long is left in the overall applicationTimeOut.
          For multiple charts, each subsequent chart resolves its timeout from the remainder of the overall applicationTimeOut.
          
          **Example:** 2 charts with a timeout of 200 seconds.
          The first chart timeout is 200 seconds. If it completes within 50 seconds, the second chart is instantiated with a timeout of 150 seconds.
          
          **Note:** If any chart fails; then applicationTimeOut is reset to its original value and used for the rollback operation. 
        
          * **helmWait:** [OPTIONAL]
          If set, will wait until all Pods, PVCs, Services,
          and minimum number of Pods of a Deployment are in a ready state before marking the release as
          successful. The wait time resolves its timeout from the remainder of the overall applicationTimeOut.
          **Defaulted to false**
          
          * **helmNoHooks** [OPTIONAL]
          If set, adds --no-hooks to the helm command.
          **Defaulted to true**
          
          **Application specific values:**
          These parameters are optional and only required for certain situations. Values can be overwritten here.
            - **someKey**: **someValue** [OPTIONAL]
              A value to be overwritten,  e.g. es.timeout
      allOf:
        - $ref: '#/components/schemas/RequestWithAdditionalParams'
        - type: object
          required:
            - type
            - aspectId
          properties:
            type:
              description: |
                Indicates the type of the scale operation requested.
                **Permitted values:**
                  * SCALE_OUT: adding additional VNFC instances to the VNF to increase capacity
                  * SCALE_IN: removing VNFC instances from the VNF in order to release unused capacity.
              type: string
              enum:
                - SCALE_OUT
                - SCALE_IN
            aspectId:
              description: |
                Identifier of the scaling aspect
              type: string
            numberOfSteps:
              description: |
                Number of scaling steps to be executed as part of this Scale
                VNF operation. The number of steps must be a positive number.
                The default value is 1.
              type: integer
              default: 1
    SyncVnfRequest:
      description: |
        This type represents a list of key-value pairs.
        The order of the pairs in the list is not significant.
        In JSON, a set of key-value pairs is represented as an object.
        
        **The supported EVNFM additional parameters:**
        * **applicationTimeOut:** [OPTIONAL] Maximum time allocated for the application to instantiate. (Defaulted to 3600s)
        This is the maximum time required for the application regardless of the number of charts to be installed.
        When the instantiate request is sent, each command resolves its timeout based on how long is left in the overall applicationTimeOut.
        For multiple charts, each subsequent chart resolves its timeout from the remainder of the overall applicationTimeOut.
        **Example:** 2 charts with a timeout of 200 seconds.
        The first chart timeout is 200 seconds. If it completes within 50 seconds, the second chart is instantiated with a timeout of 150 seconds.
      type: object
      allOf:
        - $ref: '#/components/schemas/RequestWithAdditionalParams'
    TerminateVnfRequest:
      description: |
        This type represents a list of key-value pairs.
        The order of the pairs in the list is not significant.
  
        **The supported EVNFM additional parameters:**
        
        * **applicationTimeOut:** [OPTIONAL]
        Maximum time allocated for the application to instantiate.
        **Defaulted to 3600s**
        Each chart is terminated in parallel with the same application timeout.
        
        **Example:** 2 charts with a timeout of 200 seconds.
        Both charts are terminated in parallel with a 200 second applicationTimeOut.
        
        **Note:** If cleanUpResources is specified, then applicationTimeOut is reset to its original value and used for the delete pvc operation. 
        
        * **skipVerification:** [OPTIONAL]
        Flag indicating whether to bypass the application verification checks.
        If set, LCM operation will trigger helm operation on the cluster, but will not check for instantiated objects state
        and wait for them to get up and running. **Defaulted to false**
        
        * **skipJobVerification:** [OPTIONAL]
        Flag indicating whether to bypass verification of Pods created as part of Job.
        **Defaulted to false**
        
        * **cleanUpResources:** [OPTIONAL]
        Removes the resources on the cluster that are associated with the application, including the Persistent Volume Claims (PVC) and Persistent Volumes (PV).
        This option also removes the namespace if no other VNF is instantiated within that namespace.
        **Defaulted* to true.**
        **Note:** cleanUpResources removes the PVC and PV only when the resources have the Kubernetes instance label (app.kubernetes
        .io/instance: <RELEASE_NAME>).
        
        * **deleteIdentifier** [OPTIONAL]
        Flag indicating whether to delete VNF instance resource and the associated VNF identifier after termination.
        **Defaulted to false**
        **Note:** This flag is hidden and always sent as true in the UI.
      allOf:
        - $ref: '#/components/schemas/RequestWithAdditionalParams'
        - type: object
          required:
            - terminationType
          properties:
            terminationType:
              description: |
                Indicates whether a forceful or graceful termination is requested. In JSON, a set of key- value pairs is represented as an object.
                The permitted values are as follows:
                Permitted values:
                  * FORCEFUL: The VNFM shuts down the VNF and releases the resources immediately after accepting the request.
                  * GRACEFUL: GRACEFUL requests are treated as a FORCEFUL request, which means the VNFM shuts down the VNF
                              and releases the resources immediately after accepting the request.
              type: string
              enum:
                - FORCEFUL
                - GRACEFUL
    CreateBackupsRequest:
      type: object
      description: |
        Additional parameters passed by the NFVO as input to the backup process, specific to the VNF being backup.
        This type represents a list of key-value pairs. In JSON, a set of key-value pairs is represented as an object.
        The additional parameters that are supported in EVNFM are as follows:
        
        **The supported EVNFM additional parameters:**
        
        * **scope:** [OPTIONAL]
        The scope that is used to export or import the backup.
        The scopes that can be used are: DEFAULT and EVFNM.
        
        * **backupName:** [OPTIONAL]
        The user who wants to create or export the backup
        
        * **remote.host:** [OPTIONAL]
        The remote host address to send a local snapshot to an external storage server.
        This parameter is used when doing a remote backup.
        
        * **remote.password:** [OPTIONAL]
        The remote password for remote storage server.
        This parameter is used when doing a remote backup.
      allOf:
        - $ref: '#/components/schemas/RequestWithAdditionalParams'
    VnfInfoModificationRequest:
      type: object
      properties:
        vnfPkgId:
          description: >
            Identifier of the VNF package. Value could be empty.
          type: string
        vnfInstanceName:
          description: >
            Name of the VNF instance.
            Can not be modified when VNF Instance is in INSTANTIATED state
            Query individual VNF to see instantiationState in VnfInstanceResponse for current VNF state
            Minimum length: 1
            Pattern: "[a-z0-9]+(-[a-z0-9]+)*"
            Must be lower case letters and numbers. May be separated with dashes (-), like ordinary Helm Chart names.
            Neither uppercase letters nor underscores are used. Dots should not be used.
            **Examples:**
              - Valid names: vnf-instance-name2, vnf-instance-description2, vnf-45vnf-id
              - Invalid names: vnfInstanceName, vnf.instance.name, vnf_instance_description
          type: string
        vnfInstanceDescription:
          description: >
            Human-readable description of the VNF instance. Value could be empty.
          type: string
        metadata:
          description: |
            This type represents a list of key-value pairs.
            Can not be modified when VNF Instance is in INSTANTIATED state
            Query individual VNF to see instantiationState in VnfInstanceResponse for current VNF state
            The order of the pairs in the list is not significant.
            In JSON, a set of key-value pairs is represented as an object.
          type: object
          additionalProperties:
            type: string
        extensions:
          description: |
            This type represents a list of key-value pairs.
            The order of the pairs in the list is not significant.
            In JSON, a set of keyvalue pairs is represented as an object.
            **Note:** Parameter is not supported on a full stack system, it is supported only in a small stack scenario.
          type: object
#       TODO: For now this property is part of the MR that are on hold https://jira-oss.seli.wh.rnd.internal.ericsson.com/browse/EO-142277
#       and shouldn't be visible for the customer in the documentation. That's why in order to hide it annotation "readOnly: true" exist.
    ExtManagedVirtualLinks:
      description: |
        Information about internal VLs that are managed by the NFVO.
      type: array
      readOnly: true
      items:
        type: object
        required:
          - id
          - virtualLinkDescId
          - resourceId
        properties:
          id:
            $ref: '#/components/schemas/Id'
          virtualLinkDescId:
            $ref: '#/components/schemas/VirtualLinkDescId'
          vimConnectionId:
            $ref: '#/components/schemas/VimConnectionId'
          resourceProviderId:
            $ref: '#/components/schemas/ResourceProviderId'
          resourceId:
            $ref: '#/components/schemas/ResourceId'
    ExtVirtualLinkData:
      description: |
        This type represents an external VL.
        * NOTE:	A link port is not needed for an external CP instance that exposes a VIP CP in the following cases:
                    1	For a VIP CP directly exposed as extCP:
                      1.1	No dedicated IP address is allocated as VIP address, as indicated in the VNFD.
                      1.2	A dedicated IP address is allocated as VIP address, but the NFVO indicates that no port
                            is needed (createExtLinkPort in VnfExtCpConfig set to false).
                    2	For a VIP CP exposed as extCP via a floating IP address:
                      2.1	No dedicated IP address is allocated as VIP address, as indicated in the VNFD, and the VNFC
                            CP associated to the VIP CP is also exposed via a floating IP address.
      type: object
      required:
        - id
        - resourceId
        - extCps
      properties:
        id:
          description: |
            The identifier of the external VL instance. The identifier is
            assigned by the NFV-MANO entity that manages this VL instance.
          type: string
        vimConnectionId:
          description: |
            Identifier of the VIM connection to manage this resource. This
            attribute shall only be supported and present if VNF-related
            resource management in direct mode is applicable.
          type: string
        resourceProviderId:
          description: |
            Identifies the entity responsible for the management of this
            resource. This attribute shall only be supported and present
            if VNF-related resource management in indirect mode is applicable.
            The identification scheme is outside the scope of the present
            document.
          type: string
        resourceId:
          description: |
            The identifier of the resource in the scope of the VIM or the resource provider.
          type: string
        extCps:
          description: |
            External CPs of the VNF to be connected to this external VL. Entries in the list of external
            CP data that are unchanged need not be supplied if the ExtVirtualLinkData structure is part
            of a request or response that modifies the external connectivity
          type: array
          items:
            $ref: '#/components/schemas/VnfExtCpData'
        extLinkPorts:
          description: |
            Externally provided link ports to be used to connect external
            connection points to this external VL. If this attribute is not
            present, the VNFM shall create the link ports on the external VL
            unless the extCp exposes a VIP CP and a link port is not needed
            for it based on the conditions defined below. See note.
          type: array
          items:
            $ref: '#/components/schemas/ExtLinkPorts'
        extNetAttDefResourceData:
          description: |
            Externally provided network attachment definition resource(s)
            that provide the specification of the interface to attach
            external CPs to this external VL.
            It is only applicable if the external VL is realized by a
            secondary container cluster network. It shall not be present otherwise.
          type: array
          items:
            $ref: '#/components/schemas/NetAttDefResourceData'
    IpOverEthernetAddressData:
      description: >
        This type represents network address
        data for IP over Ethernet.
      type: object
      properties:
        macAddress:
          description: >
            A MAC address. Representation: string
            that consists of groups of two
            hexadecimal digits, separated by hyphens
            or colons.
          type: string
          format: MAC
        segmentationType:
          description: |
            Specifies the encapsulation type for the traffics coming in and out of the trunk sub-port.
          type: string
          enum:
            - VLAN
            - INHERIT
        segmentationId:
          description: |
            Identification of the network segment to which the CP instance connects to.
          type: string
        ipAddresses:
          description: |
            List of IP addresses to assign to the CP instance.
            Each entry represents IP address data for fixed
            or dynamic IP address assignment per subnet.
          type: array
          items:
            $ref: '#/components/schemas/IpAddresses'
    VirtualCpAddressData:
      type: object
      required:
        - type
      properties:
        type:
          description: |
            The type of the IP addresses.
          type: string
          enum:
            - IPV4
            - IPV6
        loadBalancerIp:
          description: |
            Fixed address to assign to an external load balancer.
          type: string
          format: IP
        addressPoolName:
          description: |
            Name of the AddressPool used to allocate IP for LB.
          type: string
    AddressRange:
      description: >
        An IP address range to be used, e.g. in
        case of egress connections. In case this
        attribute is present, IP addresses from
        the range will be used.
      type: object
      required:
        - minAddress
        - maxAddress
      properties:
        minAddress:
          description: >
            An IPV4 or IPV6 address. Representation:
            In case of an IPV4 address, string that
            consists of four decimal integers
            separated by dots, each integer ranging
            from 0 to 255. In case of an IPV6
            address, string that  consists of groups
            of zero to four hexadecimal digits,
            separated by colons.
          type: string
          format: IP
        maxAddress:
          description: >
            An IPV4 or IPV6 address. Representation:
            In case of an IPV4 address, string that
            consists of four decimal integers
            separated by dots, each integer ranging
            from 0 to 255. In case of an IPV6
            address, string that  consists of groups
            of zero to four hexadecimal digits,
            separated by colons.
          type: string
          format: IP
    IpAddresses:
      type: object
      required:
        - type
      properties:
        type:
          description: |
            The type of the IP addresses.
          type: string
          enum:
            - IPV4
            - IPV6
        fixedAddresses:
          description: |
            Fixed addresses to assign (from the subnet defined by "subnetId" if provided).
          type: array
          items:
            $ref: '#/components/schemas/IpAddress'
        numDynamicAddresses:
          description: |
            Number of dynamic addresses to assign (from the subnet defined by "subnetId" if provided)
          type: integer
        addressRange:
          $ref: '#/components/schemas/AddressRange'
        subnetId:
          description: |
            Subnet defined by the identifier of the subnet resource in the VIM.
          type: string
    ResourceHandle:
      description: >
        This type represents the information that allows
        addressing a virtualized resource that is used by
        a VNF instance. Information about the resource is
        available from the VIM.
      required:
        - resourceId
      type: object
      properties:
        vimConnectionId:
          $ref: '#/components/schemas/VimConnectionId'
        resourceProviderId:
          $ref: '#/components/schemas/ResourceProviderId'
        resourceId:
          $ref: '#/components/schemas/ResourceId'
        vimLevelResourceType:
          description: >
            Type of the resource in the scope of the VIM
            or the resource provider.
          type: string
#       TODO: For now this property is part of the MR that are on hold https://jira-oss.seli.wh.rnd.internal.ericsson.com/browse/EO-142277
#       and shouldn't be visible for the customer in the documentation. That's why in order to hide it annotation "readOnly: true" exist.
        containerNamespace:
          description: |
            The value of the namespace in which the MCIO corresponding to the resource is deployed.
          type: string
          readOnly: true
        vimLevelAdditionalResourceInfo:
          type: object
          description: |
            Additional resource information which is specific to the VIM type.
            This field can hold two values:
            
              1) VimLevelAdditionalResourceInfoLegacy - Additional resource information which is specific to the VIM type. Used for rel4
              CSARs: SOL003 compliant packages. Schema of this object:
                  - **hostname: string [OPTIONAL]** -> Name of the host where the resource is allocated. It shall be present for compute resources 
                                                       in the scope of the CISM and shall be absent otherwise.
                  - **uid: string [REQUIRED]** -> UID of the Kubernetes pod.
                  - **name: string [REQUIRED]** -> Name of the Kubernetes pod.
                  - **status: string [REQUIRED]** -> Status of the Kubernetes pod. Indicates where the pod is in its life cycle.
                  - **namespace: string [REQUIRED]** -> Namespace of the Kubernetes pod it is in.
                  - **labels: {[any-key]: string} [REQUIRED]** -> Labels that are attached to the Kubernetes pod.
                  - **annotations: {[any-key]: string} [REQUIRED]** -> Annotations that are attached to the Kubernetes pod.
                  - **ownerReference: [{** -> References to the owner sets of the Kubernetes pod
                      - **apiVersion: string [REQUIRED]** -> Version of the Kubernetes API that was used for the installation
                      - **kind: string [REQUIRED]** -> Resource type of the configuration.
                      - **name: string [REQUIRED]** -> Name of the owner set.
                      - **uid: string [REQUIRED]** -> UID of the owner set.
                    **}] [REQUIRED]** 
            
              2) VimLevelAdditionalResourceInfoRel4 - Additional resource information which is specific to the VIM type. Used for pre-rel4 
              CSARs: packages non-compliant with SOL003. Schema of this object:
                  - **hostname: string [OPTIONAL]** -> Name of the host where the resource is allocated. It shall be present for compute resources 
                                                       in the scope of the CISM and shall be absent otherwise.
                  - **persistentVolume: string [OPTIONAL]** -> Name of the persistent volume to which the persistent volume claim representing 
                                                               the storage resource is bound. It may be present for storage resources 
                                                               in the scope of the CISM and shall be absent otherwise.
                  - **additionalInfo: {** -> Information related to other properties directly owned by the resource and available from the VIM or 
                                             CISM or the resource provider.
                      - **uid: string [REQUIRED]** -> UID of the Kubernetes pod.
                      - **name: string [REQUIRED]** -> Name of the Kubernetes pod.
                      - **status: string [REQUIRED]** -> Status of the Kubernetes pod. Indicates where the pod is in its life cycle.
                      - **namespace: string [REQUIRED]** -> Namespace of the Kubernetes pod it is in.
                      - **labels: {[any-key]: string} [REQUIRED]** -> Labels that are attached to the Kubernetes pod.
                      - **annotations: {[any-key]: string} [REQUIRED]** -> Annotations that are attached to the Kubernetes pod.
                      - **ownerReference: [{** -> References to the owner sets of the Kubernetes pod
                          - **apiVersion: string [REQUIRED]** -> Version of the Kubernetes API that was used for the installation
                          - **kind: string [REQUIRED]** -> Resource type of the configuration.
                          - **name: string [REQUIRED]** -> Name of the owner set.
                          - **uid: string [REQUIRED]** -> UID of the owner set.
                        **}] [REQUIRED]** 
                    **} [OPTIONAL]**
#          TODO: For now there is no backward compatible solution that can fix problem with deserialization of the interfaces that are now generated
#                with oneOf annotation. This problem better described in this ticket https://github.com/OpenAPITools/openapi-generator/issues/15082
#                When it will be fixed, please rewrite annotation and return oneOf annotation.
#          oneOf:
#            - $ref: '#/components/schemas/VimLevelAdditionalResourceInfoLegacy'
#            - $ref: '#/components/schemas/VimLevelAdditionalResourceInfoRel4'
    LinkPortId:
      description: >
        An identifier with the intention of being
        globally unique.
      type: string
    CpInstanceId:
      description: >
        An identifier that is unique for the
        respective type within a VNF instance, but
        may not be globally unique.
      type: string
    CpdId:
      description: >
        An identifier that is unique within a VNF
        descriptor.
      type: string
    Id:
      description: >
        An identifier with the intention of being globally
        unique.
      type: string
    VirtualLinkDescId:
      description: |
        An identifier that is unique within a VNF descriptor.
      type: string
    VimConnectionId:
      description: >
        Reference to the identifier of the VimConnectionInfo information element defining the VIM Connection to manage this resource.
        This attribute is supported when VNF-related resource management in direct mode is applicable.
      type: string
    VnfLcmOpOcc:
      description: >
        This type represents a VNF lifecycle management operation
        occurrence.
      type: object
      required:
        - id
        - operationState
        - stateEnteredTime
        - startTime
        - vnfInstanceId
        - operation
        - isAutomaticInvocation
        - operationParams
        - isCancelPending
      properties:
        id:
          description: |
            An identifier with the intention of being globally unique.
          type: string
        operationState:
          description: >
            The values are as follows:
              - STARTING: The LCM operation is starting.
              - PROCESSING: The LCM operation is currently in execution.
              - COMPLETED: The LCM operation has been completed successfully.
              - FAILED_TEMP: The LCM operation has failed and execution has stopped, but the execution of the operation is not considered to be closed.
              - FAILED: The LCM operation has failed and it cannot be retried or rolled back, as it is determined that such action won't succeed.
              - ROLLING_BACK: The LCM operation is currently being rolled back.
              - ROLLED_BACK: The LCM operation has been successfully rolled back, that is, the state of the VNF prior to the original 
            operation invocation has been restored as closely as possible.
          type: string
          enum:
            - STARTING
            - PROCESSING
            - COMPLETED
            - FAILED_TEMP
            - FAILED
            - ROLLING_BACK
            - ROLLED_BACK
        stateEnteredTime:
          description: |
            Date-time when the current state was entered.
          type: string
          format: date-time
        startTime:
          description: |
            Date-time of the start of the operation.
          type: string
          format: date-time
        vnfInstanceId:
          description: |
            An identifier with the intention of being globally unique.
          type: string
        grantId:
          description: |
            An identifier with the intention of being globally unique.
          type: string
        operation:
          description: >
            The values are as follows:
              - INSTANTIATE: Represents the "Instantiate VNF" LCM operation.
              - SCALE: Represents the "Scale VNF" LCM operation.
              - TERMINATE: Represents the "Terminate VNF" LCM operation. 
              - HEAL: Represents the "Heal VNF" LCM operation.
              - MODIFY_INFO: Represents the "Modify VNF Information" LCM operation. 
              - CHANGE_PACKAGE_INFO: Represents the "Change VNF package info" LCM operation.
              - CHANGE_VNFPKG: Represents the "Change current VNF package" LCM operation. 
              - SYNC: Represents the "Sync VNF" operation.
          type: string
          enum:
            - INSTANTIATE
            - SCALE
            - TERMINATE
            - HEAL
            - MODIFY_INFO
            - CHANGE_PACKAGE_INFO
            - CHANGE_VNFPKG
            - SYNC
        isAutomaticInvocation:
          description: >
            Set to true if this VNF LCM operation occurrence has been
            triggered by an automated procedure inside the VNFM (i.e.
            ScaleVnf / ScaleVnfToLevel triggered by auto-scale, or HealVnf
            triggered by auto-heal). Set to false otherwise.
          type: boolean
        operationParams:
          description: >
            This type represents a list of key-value pairs. The order of
            the pairs in the list is not significant. In JSON, a set of
            key-value pairs is represented as an object.
          type: object
        isCancelPending:
          description: >
            If the VNF LCM operation occurrence is in "STARTING",
            "PROCESSING" or "ROLLING_BACK" state and the operation is
            being cancelled, this attribute is set to true.
            Otherwise, the attribute is set to false.
          type: boolean
        cancelMode:
          description: >
            Cancellation mode. The modes are as follows: 
            
            - GRACEFUL: If the VNF LCM operation
            occurrence is in "PROCESSING" or "ROLLING_BACK" state, the
            VNFM does not start any new resource management operation and
            shall waits for the ongoing resource management operations in
            the underlying system, typically the VIM, to finish execution
            or to time out. After that, the VNFM puts the operation
            occurrence into the FAILED_TEMP state. If the VNF LCM
            operation occurrence is in "STARTING" state, the VNFM does
            not start any resource management operation and waits for
            the granting request to finish execution or time out. After
            that, the VNFM shall put the operation occurrence into the
            ROLLED_BACK state.  
            
            - FORCEFUL: If the VNF LCM operation
            occurrence is in "PROCESSING" or "ROLLING_BACK" state, the
            VNFM does not start any new resource management operation
            and cancel the ongoing resource management operations in the
            underlying system, typically the VIM, and waits for the
            cancellation to finish or to time out. After that, the VNFM
            puts the operation occurrence into the FAILED_TEMP
            state. If the VNF LCM operation occurrence is in "STARTING"
            state, the VNFM does not start any resource management
            operation and put the operation occurrence into the
            ROLLED_BACK state.
          type: string
          enum:
            - GRACEFUL
            - FORCEFUL
        error:
          $ref: '#/components/schemas/ProblemDetails'
        _links:
          $ref: '#/components/schemas/VnfLcmOpOccLinks'
        changedInfo:
          $ref: '#/components/schemas/VnfInfoModifications'
    VnfInstanceResponse:
      description: |
        This type represents a VNF instance.
      type: object
      required:
        - id
        - vnfdId
        - vnfProvider
        - vnfProductName
        - vnfSoftwareVersion
        - vnfdVersion
        - vnfPkgId
        - instantiationState
      properties:
        id:
          description: |
            Identifier of the VNF instance.
          type: string
        vnfInstanceName:
          description: >
            Name of the VNF instance. This attribute can be modified with the PATCH method.
          type: string
        vnfInstanceDescription:
          description: >
            Human-readable description of the VNF instance. This attribute can be modified with the PATCH method.
          type: string
        vnfdId:
          description: |
            Identifier of the VNFD on which the VNF instance is based.
          type: string
        vnfProvider:
          description: >
            Provider of the VNF and the VNFD. The value is copied from the VNFD.
          type: string
        vnfProductName:
          description: >
            Name to identify the VNF Product. The value is copied from the VNFD.
          type: string
        vnfSoftwareVersion:
          description: |
            Software version of the VNF. The value is copied from the VNFD.
          type: string
        vnfdVersion:
          description: |
            Identifies the version of the VNFD. The value is copied from the VNFD.
          type: string
          #not supported since v3.3.1
        vnfPkgId:
          description: |
            Identifier of information held by the NFVO about the specific VNF package on which the VNF is based. 
            This identifier was allocated by the NFVO. This attribute can be modified with the PATCH method.
          type: string
        clusterName:
          description: >
            Cluster name where the VNF instance is located
          type: string
        instantiationState:
          description: |
            The instantiation state of the VNF.
            Permitted values:
              - NOT_INSTANTIATED: The VNF instance is terminated or not instantiated.
              - INSTANTIATED: The VNF instance is instantiated.
          type: string
          enum:
            - NOT_INSTANTIATED
            - INSTANTIATED
        extensions:
          description: |
            This type represents a list of key-value pairs. The order of the pairs in the list is not significant.
            In JSON, a set of key-value pairs is represented as an object.
          type: object
        metadata:
          description: |
            Additional VNF-specific metadata describing the VNF instance.
          type: object
        instantiatedVnfInfo:
          $ref: '#/components/schemas/InstantiatedVnfInfo'
        _links:
          $ref: '#/components/schemas/VnfInstanceResponseLinks'
    VimLevelAdditionalResourceInfoBase:
#     In case you are updating this object, please consider also updating description of ResourceHandle.vimLevelAdditionalResourceInfo as
#     there no dynamic connection between.
      description: |
        Additional resource information which is specific to the VIM type
      type: object
      discriminator:
        propertyName: uid
      required:
        - uid
        - name
        - status
        - namespace
        - labels
        - annotations
        - ownerReferences
      properties:
        uid:
          description: |
            UID of the Kubernetes pod
          type: string
        name:
          description: |
            Name of the Kubernetes pod
          type: string
        status:
          description: |
            Status of the Kubernetes pod. Indicates where the pod is in its life cycle
          type: string
        namespace:
          description: |
            Namespace of the Kubernetes pod it is in
          type: string
        labels:
          type: object
          description: |
            Labels that are attached to the Kubernetes pod
          additionalProperties:
            type: string
        annotations:
          description: |
            Annotations that are attached to the Kubernetes pod
          type: object
          additionalProperties:
            type: string
        ownerReferences:
          title: OwnerReferences
          description: |
            References to the owner sets of the Kubernetes pod
          type: array
          items:
            $ref: '#/components/schemas/OwnerReference'
    VimLevelAdditionalResourceInfoLegacy:
#     In case you are updating this object, please consider also updating description of ResourceHandle.vimLevelAdditionalResourceInfo as
#     there no dynamic connection between.
      description: |
        Additional resource information which is specific to the VIM type.
        Used for pre-rel4 CSARs: packages non-compliant with SOL003
      type: object
      allOf:
        - $ref: '#/components/schemas/VimLevelAdditionalResourceInfoBase'
        - type: object
          properties:
            hostname:
              description: |
                Name of the host where the resource is allocated. 
                It shall be present for compute resources in the scope of the CISM and shall be absent otherwise.
              type: string
    VimLevelAdditionalResourceInfoRel4:
#     In case you are updating this object, please consider also updating description of ResourceHandle.vimLevelAdditionalResourceInfo as
#     there no dynamic connection between.
      description: |
        Additional resource information which is specific to the VIM type.
        Used for rel4 CSARs: SOL003 compliant packages
      type: object
      properties:
        hostname:
          description: |
            Name of the host where the resource is allocated. 
            It shall be present for compute resources in the scope of the CISM and shall be absent otherwise.
          type: string
        persistentVolume:
          description: |
            Name of the persistent volume to which the persistent volume claim representing the storage resource is bound. 
            It may be present for storage resources in the scope of the CISM and shall be absent otherwise.
          type: string
        additionalInfo:
          description: |
            Information related to other properties directly owned by the resource and available from the VIM or CISM or the resource provider.
          $ref: '#/components/schemas/VimLevelAdditionalResourceInfoBase'
    InstantiatedVnfInfo:
      description: >
        Information specific to an instantiated VNF instance. This
        attribute shall be present if the instantiateState attribute
        value is INSTANTIATED.
      type: object
      required:
        - flavourId
        - vnfState
      properties:
        flavourId:
          description: |
            Identifier of the VNF DF applied to this VNF instance.
          type: string
        vnfState:
          description: |
            The state of the VNF instance.
          type: string
          enum:
            - STARTED
            - STOPPED
        scaleStatus:
          description: >
            Scale status of the VNF, one entry per aspect.
            Represents for every scaling aspect how big the VNF has been scaled with respect to that aspect.
            This attribute is present if the VNF supports scaling.
          type: array
          items:
            $ref: '#/components/schemas/ScaleInfo'
        vnfcResourceInfo:
          type: array
          items:
            $ref : '#/components/schemas/VnfcResourceInfo'
        # since v4.3.1
        mcioInfo:
          description: >
            Lists of deployments and statefulsets. This object should be present for all types of instances (legacy or rel4 packages) of CSARs
            that are compliant to SOL003 (rel4 packages). It shall be filled with a valuable data, in other cases we should see "null" value.
          type: array
          items:
            $ref: '#/components/schemas/McioInfo'
    HealVnfRequest:
      description: |
        Request with additional parameters represents a list of key-value pairs.
        The order of the pairs in the list is not significant. In JSON, a set of
        key-value pairs is represented as an object.
        Additional parameters passed by the NFVO as input to the healing process
        and are specific to the VNF being healed.
        
        **The supported EVNFM additional parameters to HEAL a CNF:**
        
        * **ipVersion:** [OPTIONAL]
        By default, LDAP details are fetched from ENM, and the protocol version in the LDAP details is used.
          - If LDAP details have both IPv4 and IPv6 details, by default, the IPv4 version is used.
          - If there is no ipVersion information in the LDAP details, the operation fails.
        
        * **restore.backupFileReference:** [OPTIONAL]
        The value must be **"latest"** or a valid URL.
        
        * **restore.password:** [REQUIRED if **restore.backupFileReference** is specified and is a URL]
        The restore password is used for the back-up server.

        **The supported EVNFM additional parameters to HEAL a CNA:**

        * **restore.scope:** [REQUIRED]
        The restore scope to be used.

        * **restore.backupName:** [REQUIRED]
        The restore backupName is the name of the backup to be restored.

        * **day0.configuration.secretname:** [OPTIONAL]
        The secret name of the Day0 configuration.

        ***Note:***
        *If secretname is present then at least **1** key value pair must be present.*
        *User can specify many key / value pairs by changing number at end of param **eg. day0.configuration.param2.key***

        * **day0.configuration.param1.key:** [OPTIONAL]

        * **day0.configuration.param1.value:** [OPTIONAL]
      allOf:
        - $ref: '#/components/schemas/RequestWithAdditionalParams'
        - type: object
          properties:
            cause:
              description: |
                Indicates the reason why a healing procedure is required.
                **Note:** There can be only one cause, which is Full Restore.
              type: string
    ChangePackageInfoVnfRequest:
      description: |
        Request with additional parameters represents a list of key-value pairs.
        The order of the pairs in the list is not significant. In JSON, a set of
        key-value pairs is represented as an object. It shall comply
        with the provisions  defined in clause 4 of IETF RFC 7159.
        
        The supported EVNFM additional parameters:
        * **applicationTimeOut:** [OPTIONAL] Maximum time allocated for application instantiation
        (Defaulted to 3600s)
        When the package has multiple helm charts, the specified timeout will be multiplied by the number of helm charts
        * **skipVerification:** [OPTIONAL] Flag indicating whether to bypass the Application Verification Checks (Defaulted to false)
        * **helmWait:** [OPTIONAL] If set, will wait until all Pods, PVCs, Services,
        and minimum number of Pods of a Deployment are in a ready state before marking the release as
        successful. It will wait for as long as specified by applicationTimeOut.
        * **helmNoHooks** [OPTIONAL] If set, will add --no-hooks to helm command
        * **skipJobVerification:** [OPTIONAL] Flag indicating whether to bypass verification of Pods created as part of Job. (Defaulted to false)
        * **disableOpenapiValidation** [OPTIONAL] Flag to disable validation of objects going to be created against Kubernetes OpenAPI.
        (Defaulted to true)
        
        Application specific values:
        These parameters are optional and only required for certain situations. Values can be overwritten here.
        * **someKey**: **someValue** [OPTIONAL]  A value to be overwritten,  e.g. es.timeout
      allOf:
        - $ref: '#/components/schemas/RequestWithAdditionalParams'
        - type: object
          required:
            - vnfdId
          properties:
            vnfdId:
              description: |
                The identifier of the VNF descriptor
              type: string
              pattern: ^(?!\s*$).+
              x-pattern-message: "must not be blank"
    ChangeCurrentVnfPkgRequest:
      description: |
        This type represents a list of key-value pairs.
        The order of the pairs in the list is not significant.
        In JSON, a set of key-value pairs is represented as an object.
        
        **The supported EVNFM additional parameters:**
        
        * **applicationTimeOut:** [OPTIONAL]
        Maximum time allocated for the application to change package.
        **Defaulted to 3600s**
        This is the maximum time required for the application regardless of the number of charts to be installed.
        When the change package request is sent, each command resolves its timeout based on how long is left in the overall applicationTimeOut.
        For multiple charts, each subsequent chart resolves its timeout from the remainder of the overall applicationTimeOut.
        
        **Example:** 2 charts with a timeout of 200 seconds.
        The first chart timeout is 200 seconds. If it completes within 50 seconds, the second chart is instantiated with a timeout of 150 seconds.
        
        **Note:** 	If any chart fails; then applicationTimeOut is reset for the rollback operation.
        
        * **skipVerification:** [OPTIONAL]
        Flag indicating whether to bypass the application verification checks.
        If set, LCM operation will trigger helm operation on the cluster, but will not check for instantiated objects state 
        and wait for them to get up and running. **Defaulted to false**
        
        * **skipJobVerification:** [OPTIONAL]
        Flag indicating whether to bypass verification of Pods created as part of Job.
        **Defaulted to false**
        
        * **disableOpenapiValidation** [OPTIONAL]
        Flag indicating whether to validate rendered templates against the Kubernetes OpenAPI Schema
        **Defaulted to true**
        
        * **skipMergingPreviousValues** [OPTIONAL]
        Flag indicating whether to bypass merging values from previous release.
        **Defaulted to false**
        
        * **helmWait:** [OPTIONAL]
        If set, will wait until all Pods, PVCs, Services,
        and minimum number of Pods of a Deployment are in a ready state before marking the release as
        successful. The wait time resolves its timeout from the remainder of the overall applicationTimeOut.
        **Defaulted to false**
        
        * **helmNoHooks** [OPTIONAL]
        If set, adds --no-hooks to **helm** command
        **Defaulted to false**
        
        * **persistScaleInfo** [OPTIONAL]
        Flag indicating whether to persist the scale information from the current instance in the upgraded instance.
        If set to true, any scaling aspects and VNF controlled scaling extensions shared between the current package and the target package 
        are preserved after an upgrade. If set to false, the default values specified in the target package VNFD are used
        **Defaulted to true**
        
        * **helm_client_version** [OPTIONAL]
        Version used for Instantiate is used for all subsequent LCM operations.
        Defaulted at "3.8". Valid values: "3.8, "3.10", "3.12", "3.13", "3.14" and "latest" (latest supported by EVNFM, currently - 3.14).
        
        * **persistDMConfig** [OPTIONAL]
        Flag indicating whether to persist the deplyable modules configuration from the current instance in the upgraded instance.
        If this value is true, then configurations of deployable modules from target package (VNFD/API) will be replaced
        with configurations from source package. If set to false, the default values specified in the target package VNFD are used
        **Defaulted to false**
        
        * **upgrade.downsize.allowed** [OPTIONAL]
        Flag indicating whether to a non rolling upgrade will be performed and all replicas and replicasets will be set to zero before the upgrade.
        If this value is true, a non rolling upgrade will be performed and all replicas and replicasets will be set to zero before the upgrade. 
        If set to false, a non rolling upgrade will be performed, but all replicas and replicasets will not be set to zero before the upgrade.
        
        * **isAutoRollbackAllowed** [OPTIONAL]
        Flag indicating whether to allow auto-rollback on failed upgrade operation.
        If this value is true, enables auto rollback when an upgrade has failed which leaves the upgrade operation in a rolled back state. 
        If set to false, disables auto rollback when an upgrade has failed which leaves the upgrade operation in a failed state.
        
        * **upgrade_failed_parameters** [OPTIONAL]
        This parameter is used to set all parameters required to rollback the operation in case of upgrade failure. 
        Any parameters specified within this map will be used in conjunction with the rollback_at_failure_pattern. 
        If the rollback_at_failure_pattern contains keys instantiate/upgrade then parameters from this map will be sent down as part of the request. 
        Can only be used if isAutoRollbackAllowed is set to false. Will be ignored otherwise.
        
        * **Application specific values:**
        These parameters are optional and only required for certain situations. Values can be overwritten here.
            - **someKey**: **someValue** [OPTIONAL]  A value to be overwritten,  e.g. es.timeout
      allOf:
        - $ref: '#/components/schemas/RequestWithAdditionalParams'
        - type: object
          required:
            - vnfdId
          properties:
            vnfdId:
              description: |
                Identifier that identifies the VNFD which defines the VNF instance to be changed to.
              type: string
              pattern: ^(?!\s*$).+
              x-pattern-message: "must not be blank"
            extensions:
              description: |
                This type represents a list of key-value pairs.
                The order of the pairs in the list is not significant.
                In JSON, a set of keyvalue pairs is represented as an object.
                
                **The supported EVNFM extensions:**
                
                * **vnfControlledScaling** [OPTIONAL]
                Overrides the controlled scaling methods specified in the VNFD.
  
                * **deployableModules** [OPTIONAL]
                Overrides the deployable modules specified in the VNFD.
  
                **Note:** parameter is not supported on a full stack system, it is supported only in a small stack scenario
              type: object
    ConfigFileStatus:
      description: Cluster config usability status.
      type: string
      enum:
        - NOT_IN_USE
        - IN_USE
    ClusterConfigResponse:
      description: Response payload for valid cluster config file
      type: object
      required:
        - id
        - name
        - status
        - description
        - crdNamespace
        - isDefault
      properties:
        id:
          description: Cluster configuration file ID.
          type: string
        name:
          description: Cluster configuration file name.
          type: string
        status:
          $ref: '#/components/schemas/ConfigFileStatus'
        description:
          description: Cluster description
          type: string
        crdNamespace:
          description: CLuster CRD namespace.
          type: string
        isDefault:
          description: Indicates whether this is a default cluster.
          type: boolean
    PagedClusterConfigsResponse:
      description: Paged response payload for details of registered clusters
      type: object
      required:
        - _links
        - page
        - items
      properties:
        _links:
          $ref: '#/components/schemas/PaginationLinks'
        page:
          $ref: '#/components/schemas/PaginationInfo'
        items:
          description: Array of registered cluster configurations
          type: array
          items:
            $ref: '#/components/schemas/ClusterConfigResponse'
    BackupsResponseDto:
      description: >
        This type represents a Backup for an instance
      type: object
      title: BackupsResponse
      required:
        - id
        - name
        - creationTime
        - status
        - scope
      properties:
        id:
          description: |
            Identifier of the backup.
          type: string
        name:
          description: >
            The name of the backup which was used when creating the backup.
          type: string
        creationTime:
          description: |
            Creation time of the backup.
          type: string
          format: date-time
        status:
          description: |
            Status of the backup.
          type: string
          enum:
            - COMPLETE
            - INCOMPLETE
            - CORRUPTED
        scope:
          description: |
            The Backup manager to which the backup will be stored
          type: string
    VnfInfoModifications:
      description: |
        Information about the changed VNF instance information including VNF configurable properties, if applicable.
      type: object
      properties:
        vnfInstanceName:
          description: |
            If present, this attribute signals modifications of the 'vnfInstanceName' attribute in 'VnfInstance'
          type: string
        vnfInstanceDescription:
          description: |
            If present, this attribute signals modifications of the 'vnfInstanceDescription' attribute in 'VnfInstance'
          type: string
        vnfPkgId:
          description: |
            If present, this attribute signals modifications of the "vnfPkgId" attribute in "VnfInstance"
          type: string
        metadata:
          description: |
            If present, this attribute signals modifications of certain 'metadata' attribute in 'vnfInstance'
          type: object
          additionalProperties:
            type: string
        extensions:
          description: |
            If present, this attribute signals modifications of certain 'extensions' attribute in 'vnfInstance'
          type: object
        vnfDescriptorId:
          description: |
            If present, this attribute signals modifications of certain 'vnfdId' attribute in 'vnfInstance'
          type: string
        vnfProviderName:
          description: |
            If present, this attribute signals modifications of certain 'vnfProvider' attribute in 'vnfInstance'
          type: string
        vnfProductName:
          description: |
            If present, this attribute signals modifications of certain 'vnfProductName' attribute in 'vnfInstance'
          type: string
        vnfSoftwareVersion:
          description: |
            If present, this attribute signals modifications of certain 'vnfProductName' attribute in 'vnfInstance'
          type: string
        vnfdVersion:
          description: |
            If present, this attribute signals modifications of the "vnfdVersion" attribute in "VnfInstance"
          type: string
    ClusterConfigData:
      description: Paged response payload for details of registered CISM clusters
      type: object
      required:
        - id
        - name
        - status
        - description
        - crdNamespace
        - clusterData
        - isDefault
      properties:
        id:
          description: Cluster config file ID.
          type: string
        name:
          description: Cluster config file name.
          type: string
        status:
          $ref: '#/components/schemas/ConfigFileStatus'
        description:
          description: Cluster description.
          type: string
        crdNamespace:
          description: Cluster CRD namespace.
          type: string
        clusterData:
          description: Cluster data.
          type: string
        isDefault:
          description: Marker that shows if the cluster is used as default
          type: boolean
    PagedCismClusterConfigsResponse:
      description: Paged response payload for details of registered CISM clusters
      type: object
      required:
        - _links
        - page
        - items
      properties:
        _links:
          $ref: '#/components/schemas/PaginationLinks'
        page:
          $ref: '#/components/schemas/PaginationInfo'
        items:
          description: Array of registered cluster configurations
          type: array
          items:
            $ref: '#/components/schemas/ClusterConfigData'
    ScaleInfo:
      description: >
        Information specific to an instantiated VNF instance. This
        attribute shall be present if the instantiateState attribute
        value is INSTANTIATED.
      type: object
      required:
        - aspectId
        - scaleLevel
      properties:
        aspectId:
          description: >
            Identifier of the scaling aspect
          type: string
        scaleLevel:
          description: >
            Indicates the scale level. The minimum value shall
            be 0 and the maximum value shall be equals or less than maxScaleLevel as described in the VNFD.
          type: integer
    VnfcResourceInfo:
      description: >
        This type represents the information on virtualized compute and storage
        resources used by a VNFC in a VNF instance.
        * NOTE 1:	ETSI GS NFV-SOL 001 specifies the structure and format of the VNFD based on TOSCA specifications.
        * NOTE 2:	A VNFC CP is "connected to" an external CP if the VNFC CP is connected to an internal VL that
                  exposes an external CP. A VNFC CP is "exposed as" an external CP if it is connected directly
                  to an external VL.
        * NOTE 3:	The information can be omitted because it is already available as part of the external CP information.
        * NOTE 4: If only the value or the presence of this attribute is changed in the "VnfcResourceInfo" structure by
                  an LCM operation occurrence, this does not represent a change that requires including a related "AffectedVnfc"
                  structure in the VNF LCM operation occurrence notifications or the "VnfLcmOpOcc" structure related to
                  this LCM operation occurrence.
      type: object
      required:
        - id
        - vduId
        - computeResource
      properties:
        id:
          description: >
            Identifier of this VnfcResourceInfo instance.
          type: string
        vduId:
          description: >
            Reference to the applicable VDU in the VNFD.
          type: string
        computeResource:
          $ref: "#/components/schemas/ResourceHandle"
        storageResourceIds:
          description: >
            References to the VirtualStorage resources. Information about the resources is available from the VIM.
          type: array
          items:
            type: string
        reservationId:
          description: >
            The reservation identifier applicable to the resource. It shall be
            present when an applicable reservation exists.
          type: string
        metadata:
          description: >
            Metadata about this resource.
          type: object

    # SOL003 v4.3.1
    VimConnectionInfo:
      description: >
        This type represents parameters to connect to a VIM for managing the
        resources of a VNF instance.
        * NOTE 1:	If applicable, this attribute also provides information about the resourceGroupIds
                  that are accessible using a particular set of credentials. See definition of
                  "resourceGroupId" in clause 9.5.3.3.
        * NOTE 2:	Once the connectivity between VNFM and VIM is provided through a secure connection over
                  HTTP Secure (HTTP over SSL/TLS), and the connection might also be established through a VPN
                  (for example TLS-based VPN tunnelling) for site-to-site connection, the "accessInfo" JSON data
                  structure, and the sensitive data related information ("username"/"password" as required properties
                  for authentication purpose), will be transmitted as plain text through a TLS tunnel without additional
                  encoding/encryption before transmitting it, making the sensitive data visible to the endpoint.
                  The base64 encoded certificates are only used by the VNFM to verify the authenticity of the
                  interface endpoint of the VIM.
      type: object
      required:
        - vimType
      properties:
        vimId:
          description: >
            The identifier of the VIM instance. This identifier is managed by
            the NFVO.
            Shall be present to address additional information about the VIM if
            such information has been configured into the VNFM by means outside
            the scope of the present document, and should be absent otherwise.
          type: string
        vimType:
          description: >
            Discriminator for the different types of the VIM information. The value of this attribute determines the structure of the "interfaceInfo"
            and "accessInfo" attributes, based on the type of the VIM, CISM, CIR or MCIOP repository. The set of permitted values is expected to
            change over time as new types or versions of VIMs become available. The ETSI NFV registry of VIM-related information [i.3]
            provides access to information about VimConnectionInfo definitions for various VIM, CISM, CIR or MCIOP repository types. The structure of
            the registry is defined in annex C.
          type: string
        interfaceInfo:
          description: >
            Information about the interface or interfaces to the VIM,
            CISM, CIR or MCIOP repository, if applicable, such as
            the URI of an interface endpoint to communicate with the
            VIM, CISM, CIR or MCIOP repository. The applicable
            keys are dependent on the content of vimType.
            Alternatively, such information may have been configured
            into the VNFM and bound to the vimId.
          type: object
        accessInfo:
          description: >
            Authentication credentials for accessing the VIM, CISM,
            CIR or MCIOP repository and other access-related
            information such as tenants or infrastructure resource
            groups (see note 1). The applicable keys are dependent
            on the content of vimType.
            If the VimConnectionInfo structure is part of an HTTP
            response payload body, sensitive attributes that are
            children of this attributes (such as passwords) shall not
            be included.
            If the VimConnectionInfo structure is part of an HTTP
            request payload body, sensitive attributes that are
            children of this attribute (such as passwords) shall be
            present if they have not been provisioned out of band.
          type: object
        extra:
          description: >
            VIM, CISM, CIR or MCIOP repository type specific
            additional information. The applicable structure, and
            whether or not this attribute is available, is dependent on
            the content of vimType.
          type: object
    McioInfo:
      description: >
        This type provides information about an MCIO representing the set of VNFC instances realized by one or a set of OS
        containers which have been created based on the same VDU.
        Within the CISM, an MCIO controller monitors the actual state of an MCIO representing the set of VNFC instances
        realized by one or a set of OS containers and compare it to the desired state as specified in the respective declarative
        descriptor. It triggers actions toward the CIS to align the actual to the desired state. Monitoring the actual state includes
        monitoring the number of MCIO instances available at any specific point in time. In addition, an MCIO controller
        maintains properties and runtime information on the MCIO instances which have been created based on the same VDU.
        The McioInfo data structure provides the runtime information on the MCIOs obtained from the MCIO controller.
      type: object
      required:
        - mcioId
        - mcioName
        - mcioNamespace
        - vduId
        - cismId
        - mcioType
        - desiredInstances
        - availableInstances
      properties:
        mcioId:
          description: |
            Identifier of this MCIO (mcioType/metadataName).
          type: string
        mcioName:
          description: |
            Name of this MCIO.
          type: string
        mcioNamespace:
          description: |
            Namespace of this MCIO (actual namespace where VNF instance is deployed).
          type: string
        vduId:
          description: |
            Reference to the related VDU in the VNFD applicable to this resource (OwnerReferences uuid).
          type: string
        cismId:
          description: |
            Identifier of the CISM managing this MCIO (User defined name of the cluster_config in EVNFM).
          type: string
        mcioType:
          description: |
            The type of MCIO.
          type: string
          enum:
            - Deployment
            - Statefulset
        desiredInstances:
          description: |
            Number of desired MCIO instances (replicas).
          type: integer
        availableInstances:
          description: |
            Number of available MCIO instances (replicas).
          type: integer
        additionalInfo:
          description: |
            Additional information which is specific to the MCIO, its type and which is available from the CISM.
          type: object
    OwnerReference:
#     In case you are updating this object, please consider also updating description of ResourceHandle.vimLevelAdditionalResourceInfo as
#     there no dynamic connection between.
      required:
        - apiVersion
        - kind
        - name
        - uid
      type: object
      title: ownerReference
      properties:
        apiVersion:
          description: |
            Version of the Kubernetes API that was used for the installation
          type: string
        kind:
          description: |
            Resource type of the configuration
          type: string
        name:
          description: |
            Name of the owner set
          type: string
        uid:
          description: |
            UID of the owner set
          type: string
    ClusterConfigPatchRequest:
      type: object
      description: |
        This type is a list of key-value pairs. The order of the pairs in the list is not significant. 
        In JSON, a set of key-value pairs is represented as an object.
      properties:
        description:
          type: string
          nullable: true
          maxLength: 250
          description: >
            Description of cluster configuration file. Description should not be longer than 250 characters.
        isDefault:
          type: boolean
          description: >
            Boolean flag indicating whether if this cluster should be used as default.
        clusterConfig:
          $ref: '#/components/schemas/ClusterConfig'
    ClusterConfig:
      type: object
      description: |
        Represents fields of cluster configuration config in JSON format.
      properties:
        kind:
          type: string
          description: >
            A string represents kind of the resource.
        apiVersion:
          type: string
          description: >
            A string represents the version of the Kubernetes configuration file format.
        preferences:
          type: object
          description: >
            An object represents client-side preferences.
        clusters:
          type: array
          items:
            type: object
          description: >
            An array defines the Kubernetes clusters.
        contexts:
          type: array
          items:
            type: object
          description: >
            An array defines the contexts that specify which cluster, user, and namespace that can be used by default.
        current-context:
          type: string
          description: >
            A string defines default context. It refers to a context defined in the contexts section.
        users:
          type: array
          items:
            type: object
          description: >
            An array defines the users and their authentication credentials that can be used to authenticate to the clusters.