#
# COPYRIGHT Ericsson 2024
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#

openapi: 3.0.3
info:
  version: 1.0.0
  title: EVNFM VNF Lifecycle Management Interface /v1 with values.yaml file
  description: >
    EVNFM APIs that are similar in functionality and path to VNF Lifecycle Management interface but
    extended for work with values.yaml

servers:
  - url: '{protocol}://{hostname}/{basePath}'
    variables:
      protocol:
        default: https
      hostname:
        default: ${INGRESS_HOST_ADDRESS}
      basePath:
        default: vnflcm/v1

tags:
  - name: VNF Instance Operations With Values
    description: Groups all the EVNFM Specific VNF Instance operations.

paths:
  '/vnf_instances/{vnfInstanceId}/instantiate':
    parameters:
      - name: vnfInstanceId
        description: |
          Identifier of the VNF instance. This identifier can be retrieved from
          the resource referenced by the "Location" HTTP header in the response
          to a POST request creating a new VNF instance resource. It can also be
          retrieved from the "id" attribute in the payload body of that
          response.
        in: path
        required: true
        schema:
          type: string
          pattern: '[a-z0-9]+(-[a-z0-9]+)*'
    post:
      tags:
        - VNF Instance Operations With Values
      summary: Instantiate VNF
      description: Use this POST method to instantiate a VNF instance.
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be multipart/form-data
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the VNF instantiation.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - valuesFile
                - instantiateVnfRequest
              properties:
                valuesFile:
                  type: string
                  format: binary
                  description: >
                    This type represents the form-data where the values are present in key-value pairs represented in YAML format
                instantiateVnfRequest:
                  $ref: '#/components/schemas/InstantiateVnfRequest'
      operationId: instantiateVnfInstance
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vnf_instances/{vnfInstanceId}/addNode':
    post:
      tags:
        - VNF Instance Operations With Values
      summary: Add a Node to ENM
      description: The POST method adds the node to ENM.
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                valuesFile:
                  type: string
                  format: binary
                  description: >
                    This type represents the form-data where the values are present in key-value pairs represented in YAML format.
                    These include every parameter needed for the addition of the node.
                    
                    
                    **The supported EVNFM additional parameters:**

                    * **ossTopology.managedElementId:** [OPTIONAL]
                    The same as the NetworkElement Managed Object (MO) name.
                    This matches the MeContext MO name, if it exists, and is case sensitive.
                    Some characters are restricted in ENM system models. These cannot be used in the *networkElementId* attribute.
                    The following characters cannot be used:
                      - *=,%{}<>:"/\|?**
                      - *All ASCII characters below or equal to hexadecimal 1F* 
                    
                      If no value is provided, a combination of <cluster-name>-<namespace>-<vnf Instance name> is set for this parameter.

                    * **ossTopology.timeZone:** [OPTIONAL]
                    The local time zone of the node
                    Use the following command to get the appropriate value:
                      ``` cmedit describe NetworkElement.timeZone in ENM ```

                    * **ossTopology.networkElementType:** [REQUIRED]
                    The network element type.
                      - For **vSTP** nodes, provide vIP-STP.
                      - For **ESA** based nodes, provide GenericESA.
                      - For **vMSC** and **vMSC** high-capacity nodes, provide vMSC and vMSC-HC.

                    * **ossTopology.networkElementVersion:** [OPTIONAL]
                    The version of the network element.
                    In ENM, this parameter refers to ossModelIdentity (for example, 16A-CP02) for non-AXE nodes and release for AXE based nodes.
                    It is mandatory depending on the networkElementType.

                    * **ossTopology.networkElementUsername:** [REQUIRED]
                    User name to access the VNF

                    * **ossTopology.networkElementPassword:** [REQUIRED]
                    Password to access the VNF.

                    * **ossTopology.nodeIpAddress:** [REQUIRED]
                    The O&M IP Address of the Network Element.
                    Not applicable for AXE compact nodes.

                    * **ossTopology.communityString:** [OPTIONAL]
                    Community string for SNMP.
                    This value will be ignored if ossTopology.snmpVersion is empty or equals SNMP_V3. In this case ENM will set snmpReadCommunity
                    and snmpWriteCommunity for the node to default 'public'. Otherwise, if no value is specified â€“ default 'enm-public' will be set
                    Not applicable for AXE based nodes.

                    * **ossTopology.snmpPort:** [OPTIONAL]
                    SNMP port.
                    Not applicable for AXE based nodes.
                    **If a port is not provided, the default port 161 is set.**

                    * **ossTopology.snmpVersion:** [OPTIONAL]
                    SNMP Version.
                    Not applicable for AXE based nodes.
                    For SNMP V3, it is mandatory to provide as SNMP_V3.

                    * **ossTopology.snmpSecurityLevel:** [OPTIONAL]
                    Mandatory and applicable in case of SNMP V3.
                    It is the permitted level of security within a security model.
                    *ENM supports the following security levels:*
                      - AUTH_PRIV
                      - AUTH_NO_PRIV
                      - NO_AUTH_NO_PRIV 
                    
                      **Note:** The security level NO_AUTH_PRIV is not supported.

                    * **ossTopology.snmpSecurityName:** [OPTIONAL]
                    Mandatory and applicable in case of SNMP V3.
                    The security name for SNMP V3.

                    * **ossTopology.snmpAuthProtocol:** [OPTIONAL]
                    Authentication protocol used to authorize the identity of user.
                    Not applicable for AXE based nodes.
                    If not provided, it is defaulted to MD5.
                    Applicable if SNMP V3 is used and the security level is AUTH_NO_PRIV or AUTH_PRIV.
                    *Example values: MD5, SHA1.*

                    * **ossTopology.snmpPrivProtocol:** [OPTIONAL]
                    Privacy Protocol used for encryption of SNMP v3 messages to ensure confidentiality of data.
                    Not applicable for AXE based nodes. If not provided, it is defaulted to AES128 for ENM.
                    Applicable if SNMP V3 is used and the security level is AUTH_PRIV.
                    *Example values for ENM: AES128, DES.*

                    * **ossTopology.snmpAuthPassword:** [REQUIRED ONLY for ENM when SNMP V3 is used and the security level is AUTH_NO_PRIV or AUTH_PRIV.]
                    Password set for authentication with the provided Authentication Protocol for secure authorization.

                    * **ossTopology.snmpPrivacyPassword:** [REQUIRED ONLY for ENM when SNMP V3 is used and the security level is AUTH_PRIV]
                    Password set for authentication with the provided Privacy Protocol for secure authorization.

                    * **ossTopology.pmFunction:** [OPTIONAL]
                    PmFunction is used to switch on and off PMIC Mediation flows for each Network Element.
                    If PmFunction is on, all file collection, subscription activation, subscription deactivation, scanner polling, and scanner master functionality is available for the Network Element.
                    **Defaulted to false**

                    * **ossTopology.cmNodeHeartbeatSupervision:** [OPTIONAL]
                    Enabling CM Supervision copies the current status of the configuration data of the node into ENM and enables CM Notifications.
                    Enabling CM Notifications ensures that the node notifies ENM of any configuration data changes.
                    **Defaulted to true**

                    * **ossTopology.fmAlarmSupervision:** [OPTIONAL]
                    FmAlarmSupervision is used to enable or disable alarms in case of any failures.
                    **Defaulted to true**

                    * **ossTopology.netConfPort:** [REQUIRED]
                    NetConf port number.
                    **If not provided, the default port number 830 must be set.**
                    Not applicable for AXE based nodes.
                    For example, for vEPG it would be 830, and for vMME it would be 22.

                    * **ossTopology.subNetworks:** [OPTIONAL]
                    SubNetwork is used for logical grouping of nodes within ENM.
                    It can contain one or more child subnetwork.
                    *For example:*
                      - If only one subNetwork, then the format is: SubNetwork=CL.
                      - If more than one child SubNetwork, the format is SubNetwork=CL,SubNetwork=COMS. That is SubNetwork has to be separated by a comma (,).

                    * **ossTopology.transportProtocol:** [OPTIONAL]
                    Possible values are: SSH and TLS.
                    **Defaulted to SSH**
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be multipart/form-data
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
        - name: vnfInstanceId
          description: |
            Identifier of the VNF instance. This identifier can be retrieved from
            the resource referenced by the "Location" HTTP header in the response
            to a POST request creating a new VNF instance resource. It can also be
            retrieved from the "id" attribute in the payload body of that
            response.
          in: path
          required: true
          schema:
            type: string
            pattern: '[a-z0-9]+(-[a-z0-9]+)*'
      operationId: addNodeToVnfInstanceById
      responses:
        '200':
          $ref: '#/components/responses/BasicOk'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '409':
          $ref: '#/components/responses/Conflict'
  '/vnf_instances/{vnfInstanceId}/change_package_info':
    parameters:
      - name: vnfInstanceId
        description: |
          The identifier of the VNF instance to be changed. This identifier
          can be retrieved from the resource referenced by the "Location" HTTP
          header in the response to a POST request creating a new VNF instance
          resource. It can also be retrieved from the "id" attribute in the
          payload body of that response.
        in: path
        required: true
        schema:
          type: string
          pattern: '[a-z0-9]+(-[a-z0-9]+)*'
    post:
      tags:
        - VNF Instance Operations With Values
      deprecated: true
      summary: ChangePackageInfo VNF
      description: |
        The POST method changes a VNF instance.
      requestBody:
        description: Parameters for the VNF change package info.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - valuesFile
                - changePackageInfoVnfRequest
              properties:
                valuesFile:
                  type: string
                  format: binary
                  description: >
                    This type represents the form-data where the values are present in key-value pairs represented in YAML format.
                changePackageInfoVnfRequest:
                  $ref: '#/components/schemas/ChangePackageInfoVnfRequest'
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be multipart/form-data
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      operationId: changeVnfInstancePackageInfoById
      responses:
        '202':
          $ref: '#/components/responses/AcceptedWithContent'
        '400':
          $ref: '#/components/responses/Unauthorized'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vnf_instances/{vnfInstanceId}/change_vnfpkg':
    parameters:
      - name: vnfInstanceId
        description: |
          Identifies the VNFD that defines the VNF instance to be changed.
          Minimum length: 1
        in: path
        required: true
        schema:
          type: string
          pattern: '[a-z0-9]+(-[a-z0-9]+)*'
    post:
      tags:
        - VNF Instance Operations With Values
      summary: ChangePackageInfo VNF
      description: |
        Use this POST method to change a VNF instance package.
      parameters:
        - name: Accept
          description: |
            Content-Types that are acceptable for the response.
            **Note:** This value must be application/json
          in: header
          required: true
          schema:
            type: string
        - name: Content-Type
          description: |
            The MIME type of the body of the request.
            **Note:** This value must be multipart/form-data
          in: header
          required: true
          schema:
            type: string
        - name: Idempotency-key
          description: |
            Unique request identifier which is generated automatically.
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the VNF change package info.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - valuesFile
                - changeCurrentVnfPkgRequest
              properties:
                valuesFile:
                  type: string
                  format: binary
                  description: >
                    This type represents the form-data where the values are present in key-value pairs represented in YAML format.
                changeCurrentVnfPkgRequest:
                  $ref: '#/components/schemas/ChangeCurrentVnfPkgRequest'
      operationId: changeVnfPkgForVnfInstanceById
      responses:
        '202':
          $ref: '#/components/responses/AcceptedWithContent'
        '400':
          $ref: '#/components/responses/Unauthorized'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
        '416':
          $ref: '#/components/responses/RequestedRangeNotSatisfiable'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

components:
  responses:
    BasicOk:
      description: |
        OK - The request has succeeded.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
    Accepted:
      description: |
        ACCEPTED - The request was accepted for processing, but the processing has not
        been completed. The response body shall be empty. The HTTP response
        shall include a "Location" HTTP header that contains the URI of the
        newly-created "VNF LCM operation occurrence" resource corresponding
        to the operation.
      headers:
        Location:
          description: The resource URI of the created VNF LCM operation occurrence Id.
          schema:
            type: string
            format: url
    AcceptedWithContent:
      description: |
        ACCEPTED - The request was accepted for processing, but the processing has not
        been completed.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
        Location:
          description: The resource URI of the created VNF LCM operation occurrence Id.
          schema:
            type: string
            format: url
    AcceptedWithEmptyResponse:
      description: |
        ACCEPTED - The request was accepted for processing, but processing has not been completed.
        The response shall have an empty payload body.
    BadRequest:
      description: |
        Bad Request
        The API producer returns this response code in the following scenarios:
           - If the request is malformed or syntactically incorrect (for example, if the request URI contains incorrect query parameters or a 
              syntactically incorrect payload body). The ProblemDetails structure is provided, and includes in the detail attribute more 
              information about the source of the problem.
           - If the request contains a malformed access token. The ProblemDetails structure may be provided.
           - If there is an application error related to the clientâ€™s input that cannot be easily mapped to any other HTTP response code (a catch-all
              error). The ProblemDetails structure is provided, and includes in the detail attribute more information about the source of the problem.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    BadRequestQuery:
      description: |
        Bad Request
          - Invalid attribute-based filtering expression. The response body contains a ProblemDetails structure,
            in which the detail attribute conveys more information about the error.
          - Invalid attribute selector The response body contains a ProblemDetails structure,
            in which the detail attribute conveys more information about the error.
          - Response too big. If the VNFM supports alternative 1 (error) for this resource.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    Unauthorized:
      description: |
        UNAUTHORIZED - Status code indicates that the request has not been applied because 
        it lacks valid authentication credentials for the target resource. The ProblemDetails structure is provided.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    Forbidden:
      description: |
        FORBIDDEN - If the API consumer is not allowed to perform a particular request to a particular resource,
        the API producer responds with this response code. The ProblemDetails structure is provided.
        If the request contains no access token even though one is required, or if the request contains an authorization token 
        that is invalid (for example, expired or revoked), the API producer responds with this response.
        "Detail" attribute information about the source of the problem, and may indicate how to solve it.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    NotFound:
      description: |
        NOT FOUND - If the API producer did not find a current representation for the resource addressed by the URI passed in the request,
        or is not willing to disclose that one exists, it responds with this response code. The ProblemDetails structure is provided,
        including in the detail attribute information about the source of the problem, for example, a wrong resource URI variable.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    MethodNotAllowed:
      description: |
        METHOD NOT ALLOWED - The API producer returns this response code in the following scenarios:
        - If a particular HTTP method is not supported for a resource, the API producer responds with this response code.
          The ProblemDetails structure may be omitted.
        - If there is no valid EVNFM license present in NeLS. The ProblemDetails structure is provided,
          and includes more information about the source of the problem in the detail attribute.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    NotAcceptable:
      description: |
        NOT ACCEPTABLE - If the "Accept" HTTP header does not contain at least one name of a
        content type that is acceptable to the API producer, the API
        producer shall respond with this response code. The "ProblemDetails"
        structure may be omitted in that case.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    Conflict:
      description: |
        CONFLICT - The API producer responds with this response code if another request is in progress that prohibits
        the fulfillment of the current request, or the current resource state is inconsistent with the request.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    PreconditionFailed:
      description: |
        PRECONDITION FAILED - The API producer responds with this response code if a precondition
        given in an HTTP request header is not fulfilled. Typically, this is due to an ETag mismatch,
        which indicates that the resource was modified by another entity. The response body contains a ProblemDetails structure,
        in which the detail attribute conveys more information about the error.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    PayloadTooLarge:
      description: |
        PAYLOAD TOO LARGE - If the payload body of a request is larger than the amount of data the API producer is willing or able to process,
        it responds with this response code. The ProblemDetails structure can be omitted.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    URITooLong:
      description: |
        URI TOO LONG - If the request URI of a request is longer than the API producer is willing or able to process, 
        it responds with this response code. This condition can, for example,
        be caused by passing long queries in the request URI of a GET request.
        The ProblemDetails structure can be omitted
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    RequestedRangeNotSatisfiable:
      description: |
        REQUESTED RANGE NOT SATISFIABLE - This code is returned if the requested byte range in the Range HTTP
        header is not present in the requested resource.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    UnprocessableEntity:
      description: |
        UNPROCESSABLE ENTITY - If the payload body of a request contains syntactically correct data (for example, well-formed JSON)
        but the data cannot be processed (for example, because it fails validation against a schema),
        the API producer responds with this response code. The ProblemDetails structure is provided and includes in the detail
        attribute more information about the source of the problem.
        **Note:** This error response code is only applicable for methods that have a request body.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    TooManyRequests:
      description: |
        TOO MANY REQUESTS - If global limit of concurrent LCM operations was reached, the API producer responds with this response code.
        LCM operation is called as concurrent if it is not in terminal states: FAILED, ROLLED_BACK or COMPLETED, FAILED_TEMP.
        The ProblemDetails structure is provided, and includes in the detail attribute more information about the source of the problem.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    InternalServerError:
      description: |
        INTERNAL SERVER ERROR - If there is an application error not related to the clientâ€™s input that
        cannot be easily mapped to any other HTTP response code (a catch-all error), the API producer responds with this response code.
        The ProblemDetails structure is provided, and includes in the detail attribute more information about the source of the problem.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    ServiceUnavailable:
      description: |
        SERVICE UNAVAILABLE - If the API producer encounters an internal overload situation of itself or of a system it relies on,
        it responds with this response code. The ProblemDetails structure may be omitted.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    GatewayTimeout:
      description: |
        GETAWAY TIMEOUT - If the API producer didn`t receive a timely response from another upstream
        server on which it relies on. The ProblemDetails structure may be omitted.
      headers:
        Content-Type:
          description: The MIME type of the body of the response.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
  schemas:
    ProblemDetails:
      description: >
        The "status" and "detail" attributes are mandated to be included by the present
        document, to ensure that the response contains additional textual
        information about an error. It is possible that
        particular APIs in the present document, or particular
        implementations, define extensions to define additional attributes
        that provide more information about the error. The description
        column only provides some explanation of the meaning to Facilitate
        understanding of the design.
      type: object
      required:
        - status
        - detail
      properties:
        type:
          description: >
            A URI reference that identifies the problem type.
            It is encouraged that the URI provides human-readable documentation
            for the problem (e.g. using HTML) when de-referenced. 
            When this member is not present, its value is assumed to be "about:blank".
          type: string
          format: URI
        title:
          description: >
            A short, human-readable summary of the problem type. It should
            not change from occurrence to occurrence of the problem,
            except for purposes of localization. If type is given and
            other than "about:blank", this attribute shall also be
            provided. A short, human-readable summary of the problem
            type.
          type: string
        status:
          description: >
            The HTTP status code for this occurrence of the problem. The
            HTTP status code generated by the origin server for this 
            occurrence of the problem.
          type: integer
        detail:
          description: >
            A human-readable explanation specific to this occurrence of
            the problem.
          type: string
        instance:
          description: >
            A URI reference that identifies the specific occurrence of the
            problem. It may yield further information if de-referenced.
          type: string
          format: URI
    InstantiateVnfRequest:
      description: |
        Additional params in Instantiate Vnf Request represents
        a list of key-value pairs. The order of the pairs
        in the list is not significant. In JSON, a set of
        key-value pairs is represented as an object.
        
        **The supported EVNFM additional parameters:**
        
        * **namespace:** [OPTIONAL]
        The namespace the application is to be deployed into. 
        **Note:** The same namespace cannot be selected as EVNFM or any Kubernetes initialized namespaces
                  (default, kube-system, kube-public, kube-node-lease) or cluster's crd namespace. If selected the request will be rejected.
        
        * **cleanUpResources:** [OPTIONAL]
        Removes the resources on the cluster that are associated with the application, including the Persistent Volume Claims (PVC) and Persistent Volumes (PV).
        **Defaulted to true.**
        This option also removes the namespace if no other VNF is instantiated within that namespace.
        **Note:** cleanUpResources removes the PVC and PV only when the resources have the Kubernetes instance label (app.kubernetes
        .io/instance: <RELEASE_NAME>).
        
        * **applicationTimeOut:** [OPTIONAL]
        The maximum time allocated for the application to instantiate.
        This is the maximum time required for the application regardless of the number of charts to be installed.
        When the instantiate request is sent, each command resolves its timeout based on how long is left in the overall applicationTimeOut. 
        For multiple charts, each subsequent chart resolves its timeout from the remainder of the overall applicationTimeOut.
        *Defaulted* to 3600s
        ***Example:*** 2 charts with a timeout of 200 seconds.
        The first chart timeout is 200 seconds. If it completes within 50 seconds, the second chart is instantiated with a timeout of 150 seconds.
        **Note:** If cleanUpResources is specified and a chart fails; then applicationTimeOut is reset to its original value and used 
                  for the terminate operation. 
        
        * **skipVerification:** [OPTIONAL]
        Flag indicating whether to bypass the application verification checks.
        If set, LCM operation will trigger helm operation on the cluster, but will not check for instantiated objects state and
        wait for them to get up and running. This flag cannot be set to true if CMPv2Enrollment and addNodeToOss are set to true,
        otherwise the request is considered a bad request. **Defaulted to false**
        **Note:** Setting skipVerification = true may lead to the absence of day0 secrets configuration during the pod instantiation process, 
        because secrets may be deleted before helm operation is actually completed.
        
        * **skipJobVerification:** [OPTIONAL]
        Flag indicating whether to bypass verification of Pods created as part of Job.
        **Defaulted to false**
        
        * **disableOpenapiValidation** [OPTIONAL]
        Flag indicating whether to validate rendered templates against the Kubernetes OpenAPI Schema.
        **Defaulted to true**
        
        * **helmWait:** [OPTIONAL]
        If set, waits until all pods, PVC, services, and minimum number of pods of a deployment are in a ready state before marking 
        the release as successful. The wait time resolves its timeout from the remainder of the overall applicationTimeOut.
        **Defaulted to false**
        
        * **retrieveUnsealKey** [OPTIONAL]
        Flag indicating whether to perform KMS interactions during instantiation.
        **Defaulted to true**
        
        * **helmNoHooks** [OPTIONAL]
        If set, adds --no-hooks to **helm** command
        **Defaulted to false**
        
        * **manoControlledScaling** [OPTIONAL]
        Flag that indicates how the scaling of the deployment is handled:
         - By the Kubernetes Horizontal Pod Autoscaler (HPA)
         - By EVNFM controlling the HPA through ScaleVnfRequests from the user.
        **Defaulted* to false**(which means the HPA handles scaling)*
        **Note:** If HPAs handle the scaling, then EVNFM does not know the current replica count. The HPA may have scaled the resources
        based on usage.
        
        * **helm_client_version** [OPTIONAL]
        Version used for Instantiate is used for all subsequent LCM operations.
        Defaulted at "3.8". Valid values: "3.8, "3.10", "3.12", "3.13", "3.14" and "latest" (latest supported by EVNFM, currently - 3.14).
        
        * **sitebasic.xml** [OPTIONAL]
        Sitebasic file is used for creating enrollment info file. If not provided, EVNFM generates it based on ossTopology additional parameters.
        
        * **ipVersion** [OPTIONAL]
        Required for LDAP configuration. If not provided, IPv4 is used as default protocol family.
        
        **Application specific values:**
        These parameters are optional and only required for certain situations. Values can be overwritten here.
        
          - **someKey**: **someValue** [OPTIONAL]
            A value to be overwritten,  e.g. es.timeout
      allOf:
        - $ref: '#/components/schemas/RequestWithAdditionalParams'
        - type: object
          properties:
            flavourId:
              description: |
                An identifier that is unique within a VNF descriptor.
              type: string
            instantiationLevelId:
              description: |
                An identifier that is unique within a VNF descriptor.
                **Note:** parameter is not supported on a full stack system, it is supported only in a small stack scenario
              type: string
            targetScaleLevelInfo:
              description: >
                Target scale level of each scaling aspect that should be applied during instantiation. One entry per scaling aspect.
                The target size for VNF instantiation may be specified in either instantiationLevelId or targetScaleLevelInfo, but not both.
                If none of the two attributes (instantiationLevelId or targetScaleLevelInfo) are present, the default instantiation
                level as declared in the VNFD will be used. If targetScaleLevelInfo is specified, information provided in targetScaleLevelInfo shall
                be used for instantiating scalable constituents of the VNF (e.g, VDUs). For scaling aspects not specified in targetScaleLevelInfo or
                for the VNF constituents (e.g.VDUs) that are not scalable, the default instantiation level as declared
                in the VNFD shall be used for instantiation.
              type: array
              items:
                $ref: '#/components/schemas/ScaleInfo'
            clusterName:
              description: >
                Cluster name where the VNF instance is to be instantiated
              type: string
              minLength: 1
              pattern: '[0-9a-zA-Z][0-9a-zA-Z-_]*(\.config)?$'
              x-pattern-message: 'must consist of alphanumeric characters, - or _. It must start with an alphanumeric character'
            #       TODO: For now this property is part of the MR that are on hold https://jira-oss.seli.wh.rnd.internal.ericsson.com/browse/EO-142277
            #       and shouldn't be visible for the customer in the documentation. That's why in order to hide it annotation "readOnly: true" exist.
            extVirtualLinks:
              description: Information about external VLs to connect the VNF to.
              type: array
              readOnly: true
              items:
                $ref: '#/components/schemas/ExtVirtualLinkData'
            extManagedVirtualLinks:
              $ref: '#/components/schemas/ExtManagedVirtualLinks'
            localizationLanguage:
              description: >
                Localization language of the VNF to be instantiated.
              type: string
            extensions:
              description: |
                This type represents a list of key-value pairs.
                The order of the pairs in the list is not significant.
                In JSON, a set of keyvalue pairs is represented as an object.
                
                **The supported EVNFM extensions:**
                  * **vnfControlledScaling** [OPTIONAL]
                  Overrides the controlled scaling methods specified in the VNFD.
                
                  * **deployableModules** [OPTIONAL]
                  Overrides status of the deployable modules specified in the VNFD.
                
                **Note:** parameter is not supported on a full stack system, it is supported only in a small stack scenario.
              type: object
    RequestWithAdditionalParams:
      type: object
      discriminator:
        propertyName: discriminatorProperty
      properties:
        #       TODO: For now there is no way to set field as a discriminator and not to add it as ignored for deserialization.
        #       I hope in near future this problem will be fixed and we will be able to get rid of this field.
        #       Also readOnly was added to keep this field from appearing in the documentation, please don't remove it unless you know what you're doing.
        discriminatorProperty:
          description: This property should not be visible to customer and used only as workaround to keep additionalParams as not a discriminator
          type: string
          readOnly: true
        additionalParams:
          description: |
            This type represents a list of key-value pairs. The order of
            the pairs in the list is not significant. In JSON, a set of
            key-value pairs is represented as an object.
          type: object
    ScaleInfo:
      description: >
        Information specific to an instantiated VNF instance. This
        attribute shall be present if the instantiateState attribute
        value is INSTANTIATED.
      type: object
      required:
        - aspectId
        - scaleLevel
      properties:
        aspectId:
          description: >
            Identifier of the scaling aspect
          type: string
        scaleLevel:
          description: >
            Indicates the scale level. The minimum value shall
            be 0 and the maximum value shall be equals or less than maxScaleLevel as described in the VNFD.
          type: integer
    ExtVirtualLinkData:
      description: |
        This type represents an external VL.
        * NOTE:	A link port is not needed for an external CP instance that exposes a VIP CP in the following cases:
                    1	For a VIP CP directly exposed as extCP:
                      1.1	No dedicated IP address is allocated as VIP address, as indicated in the VNFD.
                      1.2	A dedicated IP address is allocated as VIP address, but the NFVO indicates that no port
                            is needed (createExtLinkPort in VnfExtCpConfig set to false).
                    2	For a VIP CP exposed as extCP via a floating IP address:
                      2.1	No dedicated IP address is allocated as VIP address, as indicated in the VNFD, and the VNFC
                            CP associated to the VIP CP is also exposed via a floating IP address.
      type: object
      required:
        - id
        - resourceId
        - extCps
      properties:
        id:
          description: |
            The identifier of the external VL instance. The identifier is
            assigned by the NFV-MANO entity that manages this VL instance.
          type: string
        vimConnectionId:
          description: |
            Identifier of the VIM connection to manage this resource. This
            attribute shall only be supported and present if VNF-related
            resource management in direct mode is applicable.
          type: string
        resourceProviderId:
          description: |
            Identifies the entity responsible for the management of this
            resource. This attribute shall only be supported and present
            if VNF-related resource management in indirect mode is applicable.
            The identification scheme is outside the scope of the present
            document.
          type: string
        resourceId:
          description: |
            The identifier of the resource in the scope of the VIM or the resource provider.
          type: string
        extCps:
          description: |
            External CPs of the VNF to be connected to this external VL. Entries in the list of external
            CP data that are unchanged need not be supplied if the ExtVirtualLinkData structure is part
            of a request or response that modifies the external connectivity
          type: array
          items:
            $ref: '#/components/schemas/VnfExtCpData'
        extLinkPorts:
          description: |
            Externally provided link ports to be used to connect external
            connection points to this external VL. If this attribute is not
            present, the VNFM shall create the link ports on the external VL
            unless the extCp exposes a VIP CP and a link port is not needed
            for it based on the conditions defined below. See note.
          type: array
          items:
            $ref: '#/components/schemas/ExtLinkPorts'
        extNetAttDefResourceData:
          description: |
            Externally provided network attachment definition resource(s)
            that provide the specification of the interface to attach
            external CPs to this external VL.
            It is only applicable if the external VL is realized by a
            secondary container cluster network. It shall not be present otherwise.
          type: array
          items:
            $ref: '#/components/schemas/NetAttDefResourceData'
    VnfExtCpData:
      description: >
        This type represents configuration information for
        external CPs created from a CPD.
      type: object
      required:
        - cpdId
      properties:
        cpdId:
          description: |
            The identifier of the CPD in the VNFD.
          type: string
        cpConfig:
          description: |
            Map of instance data that need to be configured on
            the CP instances created from the respective CPD.
            The key of the map which identifies the individual
            VnfExtCpConfig entries is of type "IdentifierInVnf"
            and is managed by the NFVO.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/VnfExtCpConfig"
    VnfExtCpConfig:
      description: |
        This type represents an externally provided link port or network address
        information per instance of an external connection point. In case a link
        port is provided, the VNFM shall use that link port when connecting the
        external CP to the external VL. In a link port is not provided, the VNFM
        shall create a link port on the external VL, and use that link port to
        connect the external CP to the external VL.
        * NOTE: The following conditions apply to the attributes "linkPortId" and "cpProtocolData":
            1)  Void.
            2)  At least one of the "linkPortId" and "cpProtocolData" attributes shall be present for an external
                CP instance representing a sub-port that is to be created, or an external CP instance that is to be
                created by creating the corresponding VNFC or VNF instance during the current or a subsequent LCM
                operation, or for an existing external CP instance that is to be re-configured or added to a
                particular external virtual link.
            3)  If the "linkPortId" attribute is absent, the VNFM shall create a link port.
            4)  If the "cpProtocolData" attribute is absent, the "linkPortId" attribute shall be provided referencing
                a pre created link port, and the VNFM can use means outside the scope of the present document to obtain
                the pre-configured address information for the connection point from the resource representing
                the link port.
            5)  If both "cpProtocolData" and "linkportId" are provided, the API consumer shall ensure that the
                cpProtocolData can be used with the pre-created link port referenced by "linkPortId".
      type: object
      properties:
        parentCpConfigId:
          description: >
            Value of the key that identifies the  "VnfExtCpConfig" map entry which corresponds to the parent port of the
            trunk. Reference to the "VnfExtCpConfig" entry that corresponds to the parent port of the trunk. Only present
            in "VnfExtCpConfig" structures that provide configuration information for a CP which represents a sub-port in
            a trunk, and if parent ports are supported.
          type: string
        linkPortId:
          description: |
            Identifier of a pre-configured link port to which the external CP will be associated.Â 
          type: string
        createExtLinkPort:
          description: |
            Indicates to the VNFM the need to create a dedicated link port for the external CP.
          type: boolean
        netAttDefResourceId:
          type: array
          items:
            description: |
              Identifier of the "NetAttDefResourceData" structure
              that provides the specification of the interface to
              attach the external CP to a secondary container cluster network.
            type: string
        cpProtocolData:
          description: |
            Parameters for configuring the network protocols on the link port that connects the CP to a VL.
          type: array
          items:
            $ref: '#/components/schemas/CpProtocolData'
    CpProtocolData:
      description: >
        Parameters for configuring the network
        protocols on the link port that connects the
        CP to a VL.  The following conditions apply
        to the attributes "linkPortId" and
        "cpProtocolData":  * The "linkPortId" and
        "cpProtocolData" attributes shall both be
        absent for the deletion of an existing external CP instance
          addressed by cpInstanceId.
        * At least one of these attributes shall be
        present for a
          to-be-created external CP instance or an existing external
          CP instance.
        * If the "linkPortId" attribute is absent,
        the VNFM shall create a
          link port.
        * If the "cpProtocolData" attribute is
        absent, the "linkPortId"
          attribute shall be provided referencing a pre-created link port,
          and the VNFM can use means outside the scope of the present
          document to obtain the pre-configured address information for the
          connection point from the resource representing the link port.
        * If both "cpProtocolData" and "linkportId"
        are provided, the API
          consumer shall ensure that the cpProtocolData can be used with the
          pre-created link port referenced by "linkPortId".
      type: object
      required:
        - layerProtocol
      properties:
        layerProtocol:
          description: |
            Identifier of layer(s) and protocol(s).
          type: string
          enum:
            - IP_OVER_ETHERNET
            - IP_FOR_VIRTUAL_CP
        ipOverEthernet:
          $ref: '#/components/schemas/IpOverEthernetAddressData'
        virtualCpAddress:
          $ref: '#/components/schemas/VirtualCpAddressData'
    IpOverEthernetAddressData:
      description: >
        This type represents network address
        data for IP over Ethernet.
      type: object
      properties:
        macAddress:
          description: >
            A MAC address. Representation: string
            that consists of groups of two
            hexadecimal digits, separated by hyphens
            or colons.
          type: string
          format: MAC
        segmentationType:
          description: |
            Specifies the encapsulation type for the traffics coming in and out of the trunk sub-port.
          type: string
          enum:
            - VLAN
            - INHERIT
        segmentationId:
          description: |
            Identification of the network segment to which the CP instance connects to.
          type: string
        ipAddresses:
          description: |
            List of IP addresses to assign to the CP instance.
            Each entry represents IP address data for fixed
            or dynamic IP address assignment per subnet.
          type: array
          items:
            $ref: '#/components/schemas/IpAddresses'
    IpAddresses:
      type: object
      required:
        - type
      properties:
        type:
          description: |
            The type of the IP addresses.
          type: string
          enum:
            - IPV4
            - IPV6
        fixedAddresses:
          description: |
            Fixed addresses to assign (from the subnet defined by "subnetId" if provided).
          type: array
          items:
            $ref: '#/components/schemas/IpAddress'
        numDynamicAddresses:
          description: |
            Number of dynamic addresses to assign (from the subnet defined by "subnetId" if provided)
          type: integer
        addressRange:
          $ref: '#/components/schemas/AddressRange'
        subnetId:
          description: |
            Subnet defined by the identifier of the subnet resource in the VIM.
          type: string
    IpAddress:
      description: >
        An IPV4 or IPV6 address. Representation: In case of an IPV4 address, string that consists of four decimal
        integers separated by dots, each integer ranging from 0 to 255. In case of an IPV6 address, string that
        consists of groups of zero to four hexadecimal digits, separated by colons.
      type: string
      format: IP
    AddressRange:
      description: >
        An IP address range to be used, e.g. in
        case of egress connections. In case this
        attribute is present, IP addresses from
        the range will be used.
      type: object
      required:
        - minAddress
        - maxAddress
      properties:
        minAddress:
          description: >
            An IPV4 or IPV6 address. Representation:
            In case of an IPV4 address, string that
            consists of four decimal integers
            separated by dots, each integer ranging
            from 0 to 255. In case of an IPV6
            address, string that  consists of groups
            of zero to four hexadecimal digits,
            separated by colons.
          type: string
          format: IP
        maxAddress:
          description: >
            An IPV4 or IPV6 address. Representation:
            In case of an IPV4 address, string that
            consists of four decimal integers
            separated by dots, each integer ranging
            from 0 to 255. In case of an IPV6
            address, string that  consists of groups
            of zero to four hexadecimal digits,
            separated by colons.
          type: string
          format: IP
    VirtualCpAddressData:
      type: object
      required:
        - type
      properties:
        type:
          description: |
            The type of the IP addresses.
          type: string
          enum:
            - IPV4
            - IPV6
        loadBalancerIp:
          description: |
            Fixed address to assign to an external load balancer.
          type: string
          format: IP
        addressPoolName:
          description: |
            Name of the AddressPool used to allocate IP for LB.
          type: string
    ExtLinkPorts:
      description: >
        This type represents an externally provided link port
        to be used to connect an external connection point to
        an external VL.
      type: object
      required:
        - id
        - resourceHandle
      properties:
        id:
          $ref: '#/components/schemas/Id'
        resourceHandle:
          $ref: '#/components/schemas/ResourceHandle'
    Id:
      description: >
        An identifier with the intention of being globally
        unique.
      type: string
    ResourceHandle:
      description: >
        This type represents the information that allows
        addressing a virtualized resource that is used by
        a VNF instance. Information about the resource is
        available from the VIM.
      required:
        - resourceId
      type: object
      properties:
        vimConnectionId:
          $ref: '#/components/schemas/VimConnectionId'
        resourceProviderId:
          $ref: '#/components/schemas/ResourceProviderId'
        resourceId:
          $ref: '#/components/schemas/ResourceId'
        vimLevelResourceType:
          description: >
            Type of the resource in the scope of the VIM
            or the resource provider.
          type: string
        #       TODO: For now this property is part of the MR that are on hold https://jira-oss.seli.wh.rnd.internal.ericsson.com/browse/EO-142277
        #       and shouldn't be visible for the customer in the documentation. That's why in order to hide it annotation "readOnly: true" exist.
        containerNamespace:
          description: |
            The value of the namespace in which the MCIO corresponding to the resource is deployed.
          type: string
          readOnly: true
        vimLevelAdditionalResourceInfo:
          type: object
          description: |
            Additional resource information which is specific to the VIM type.
            This field can hold two values:
            
              1) VimLevelAdditionalResourceInfoLegacy - Additional resource information which is specific to the VIM type. Used for rel4
              CSARs: SOL003 compliant packages. Schema of this object:
                  - **hostname: string [OPTIONAL]** -> Name of the host where the resource is allocated. It shall be present for compute resources 
                                                       in the scope of the CISM and shall be absent otherwise.
                  - **uid: string [REQUIRED]** -> UID of the Kubernetes pod.
                  - **name: string [REQUIRED]** -> Name of the Kubernetes pod.
                  - **status: string [REQUIRED]** -> Status of the Kubernetes pod. Indicates where the pod is in its life cycle.
                  - **namespace: string [REQUIRED]** -> Namespace of the Kubernetes pod it is in.
                  - **labels: {[any-key]: string} [REQUIRED]** -> Labels that are attached to the Kubernetes pod.
                  - **annotations: {[any-key]: string} [REQUIRED]** -> Annotations that are attached to the Kubernetes pod.
                  - **ownerReference: [{** -> References to the owner sets of the Kubernetes pod
                      - **apiVersion: string [REQUIRED]** -> Version of the Kubernetes API that was used for the installation
                      - **kind: string [REQUIRED]** -> Resource type of the configuration.
                      - **name: string [REQUIRED]** -> Name of the owner set.
                      - **uid: string [REQUIRED]** -> UID of the owner set.
                    **}] [REQUIRED]** 
            
              2) VimLevelAdditionalResourceInfoRel4 - Additional resource information which is specific to the VIM type. Used for pre-rel4 
              CSARs: packages non-compliant with SOL003. Schema of this object:
                  - **hostname: string [OPTIONAL]** -> Name of the host where the resource is allocated. It shall be present for compute resources 
                                                       in the scope of the CISM and shall be absent otherwise.
                  - **persistentVolume: string [OPTIONAL]** -> Name of the persistent volume to which the persistent volume claim representing 
                                                               the storage resource is bound. It may be present for storage resources 
                                                               in the scope of the CISM and shall be absent otherwise.
                  - **additionalInfo: {** -> Information related to other properties directly owned by the resource and available from the VIM or 
                                             CISM or the resource provider.
                      - **uid: string [REQUIRED]** -> UID of the Kubernetes pod.
                      - **name: string [REQUIRED]** -> Name of the Kubernetes pod.
                      - **status: string [REQUIRED]** -> Status of the Kubernetes pod. Indicates where the pod is in its life cycle.
                      - **namespace: string [REQUIRED]** -> Namespace of the Kubernetes pod it is in.
                      - **labels: {[any-key]: string} [REQUIRED]** -> Labels that are attached to the Kubernetes pod.
                      - **annotations: {[any-key]: string} [REQUIRED]** -> Annotations that are attached to the Kubernetes pod.
                      - **ownerReference: [{** -> References to the owner sets of the Kubernetes pod
                          - **apiVersion: string [REQUIRED]** -> Version of the Kubernetes API that was used for the installation
                          - **kind: string [REQUIRED]** -> Resource type of the configuration.
                          - **name: string [REQUIRED]** -> Name of the owner set.
                          - **uid: string [REQUIRED]** -> UID of the owner set.
                        **}] [REQUIRED]** 
                    **} [OPTIONAL]**
    #          TODO: For now there is no backward compatible solution that can fix problem with deserialization of the interfaces that are now generated
    #                with oneOf annotation. This problem better described in this ticket https://github.com/OpenAPITools/openapi-generator/issues/15082
    #                When it will be fixed, please rewrite annotation and return oneOf annotation.
    #          oneOf:
    #            - $ref: '#/components/schemas/VimLevelAdditionalResourceInfoLegacy'
    #            - $ref: '#/components/schemas/VimLevelAdditionalResourceInfoRel4'
    VimConnectionId:
      description: >
        Reference to the identifier of the VimConnectionInfo information element defining the VIM Connection to manage this resource.
        This attribute is supported when VNF-related resource management in direct mode is applicable.
      type: string
    ResourceProviderId:
      description: >
        Identifies the entity responsible for the management of the virtualized resource.
        This attribute is supported when VNF-related resource management in indirect mode is applicable.
      type: string
    ResourceId:
      description: >
        An identifier maintained by the VIM or other resource
        provider. It is expected to be unique within the VIM
        instance.
      type: string
    NetAttDefResourceData:
      description: |
        The NetAttDefResourceData data type represents
        a network attachment definition resource
        which is used to connect one or multiple connection points
        to a secondary container cluster network realizing a VL.
      type: object
      required:
        - resourceHandle
      properties:
        netAttDefResourceId:
          description: |
            Identifier of this network attachment definition resource as provided by the entity that has created it.
          type: string
        resourceHandle:
          $ref: '#/components/schemas/ResourceHandle'
    ExtManagedVirtualLinks:
      description: |
        Information about internal VLs that are managed by the NFVO.
      type: array
      readOnly: true
      items:
        type: object
        required:
          - id
          - virtualLinkDescId
          - resourceId
        properties:
          id:
            $ref: '#/components/schemas/Id'
          virtualLinkDescId:
            $ref: '#/components/schemas/VirtualLinkDescId'
          vimConnectionId:
            $ref: '#/components/schemas/VimConnectionId'
          resourceProviderId:
            $ref: '#/components/schemas/ResourceProviderId'
          resourceId:
            $ref: '#/components/schemas/ResourceId'
    VirtualLinkDescId:
      description: |
        An identifier that is unique within a VNF descriptor.
      type: string
    ChangePackageInfoVnfRequest:
      description: |
        Request with additional parameters represents a list of key-value pairs.
        The order of the pairs in the list is not significant. In JSON, a set of
        key-value pairs is represented as an object. It shall comply
        with the provisions  defined in clause 4 of IETF RFC 7159.

        The supported EVNFM additional parameters:
        * **applicationTimeOut:** [OPTIONAL] Maximum time allocated for application instantiation
        (Defaulted to 3600s)
        When the package has multiple helm charts, the specified timeout will be multiplied by the number of helm charts
        * **skipVerification:** [OPTIONAL] Flag indicating whether to bypass the Application Verification Checks (Defaulted to false)
        * **helmWait:** [OPTIONAL] If set, will wait until all Pods, PVCs, Services,
        and minimum number of Pods of a Deployment are in a ready state before marking the release as
        successful. It will wait for as long as specified by applicationTimeOut.
        * **helmNoHooks** [OPTIONAL] If set, will add --no-hooks to helm command
        * **skipJobVerification:** [OPTIONAL] Flag indicating whether to bypass verification of Pods created as part of Job. (Defaulted to false)
        * **disableOpenapiValidation** [OPTIONAL] Flag to disable validation of objects going to be created against Kubernetes OpenAPI.
        (Defaulted to true)

        Application specific values:
        These parameters are optional and only required for certain situations. Values can be overwritten here.
        * **someKey**: **someValue** [OPTIONAL]  A value to be overwritten,  e.g. es.timeout
      allOf:
        - $ref: '#/components/schemas/RequestWithAdditionalParams'
        - type: object
          required:
            - vnfdId
          properties:
            vnfdId:
              description: |
                The identifier of the VNF descriptor
              type: string
              pattern: ^(?!\s*$).+
              x-pattern-message: "must not be blank"
    ChangeCurrentVnfPkgRequest:
      description: |
        This type represents a list of key-value pairs.
        The order of the pairs in the list is not significant.
        In JSON, a set of key-value pairs is represented as an object.

        **The supported EVNFM additional parameters:**

        * **applicationTimeOut:** [OPTIONAL]
        Maximum time allocated for the application to change package.
        **Defaulted to 3600s**
        This is the maximum time required for the application regardless of the number of charts to be installed.
        When the change package request is sent, each command resolves its timeout based on how long is left in the overall applicationTimeOut.
        For multiple charts, each subsequent chart resolves its timeout from the remainder of the overall applicationTimeOut.

        **Example:** 2 charts with a timeout of 200 seconds.
        The first chart timeout is 200 seconds. If it completes within 50 seconds, the second chart is instantiated with a timeout of 150 seconds.

        **Note:** 	If any chart fails; then applicationTimeOut is reset for the rollback operation.

        * **skipVerification:** [OPTIONAL]
        Flag indicating whether to bypass the application verification checks.
        If set, LCM operation will trigger helm operation on the cluster, but will not check for instantiated objects state 
        and wait for them to get up and running. **Defaulted to false**

        * **skipJobVerification:** [OPTIONAL]
        Flag indicating whether to bypass verification of Pods created as part of Job.
        **Defaulted to false**

        * **disableOpenapiValidation** [OPTIONAL]
        Flag indicating whether to validate rendered templates against the Kubernetes OpenAPI Schema
        **Defaulted to true**

        * **skipMergingPreviousValues** [OPTIONAL]
        Flag indicating whether to bypass merging values from previous release.
        **Defaulted to false**

        * **helmWait:** [OPTIONAL]
        If set, will wait until all Pods, PVCs, Services,
        and minimum number of Pods of a Deployment are in a ready state before marking the release as
        successful. The wait time resolves its timeout from the remainder of the overall applicationTimeOut.
        **Defaulted to false**

        * **helmNoHooks** [OPTIONAL]
        If set, adds --no-hooks to **helm** command
        **Defaulted to false**

        * **persistScaleInfo** [OPTIONAL]
        Flag indicating whether to persist the scale information from the current instance in the upgraded instance.
        If set to true, any scaling aspects and VNF controlled scaling extensions shared between the current package and the target package 
        are preserved after an upgrade. If set to false, the default values specified in the target package VNFD are used
        **Defaulted to true**

        * **helm_client_version** [OPTIONAL]
        Version used for Instantiate is used for all subsequent LCM operations.
        Defaulted at "3.8". Valid values: "3.8, "3.10", "3.12", "3.13", "3.14" and "latest" (latest supported by EVNFM, currently - 3.14).

        * **persistDMConfig** [OPTIONAL]
        Flag indicating whether to persist the deplyable modules configuration from the current instance in the upgraded instance.
        If this value is true, then configurations of deployable modules from target package (VNFD/API) will be replaced
        with configurations from source package. If set to false, the default values specified in the target package VNFD are used
        **Defaulted to false**
        
        * **upgrade.downsize.allowed** [OPTIONAL]
        Flag indicating whether to a non rolling upgrade will be performed and all replicas and replicasets will be set to zero before the upgrade.
        If this value is true, a non rolling upgrade will be performed and all replicas and replicasets will be set to zero before the upgrade. 
        If set to false, a non rolling upgrade will be performed, but all replicas and replicasets will not be set to zero before the upgrade.
        
        * **isAutoRollbackAllowed** [OPTIONAL]
        Flag indicating whether to allow auto-rollback on failed upgrade operation.
        If this value is true, enables auto rollback when an upgrade has failed which leaves the upgrade operation in a rolled back state. 
        If set to false, disables auto rollback when an upgrade has failed which leaves the upgrade operation in a failed state.
        
        * **upgrade_failed_parameters** [OPTIONAL]
        This parameter is used to set all parameters required to rollback the operation in case of upgrade failure. 
        Any parameters specified within this map will be used in conjunction with the rollback_at_failure_pattern. 
        If the rollback_at_failure_pattern contains keys instantiate/upgrade then parameters from this map will be sent down as part of the request. 
        Can only be used if isAutoRollbackAllowed is set to false. Will be ignored otherwise.

        * **Application specific values:**
        These parameters are optional and only required for certain situations. Values can be overwritten here.
            - **someKey**: **someValue** [OPTIONAL]  A value to be overwritten,  e.g. es.timeout
      allOf:
        - $ref: '#/components/schemas/RequestWithAdditionalParams'
        - type: object
          required:
            - vnfdId
          properties:
            vnfdId:
              description: |
                Identifier that identifies the VNFD which defines the VNF instance to be changed to.
              type: string
              pattern: ^(?!\s*$).+
              x-pattern-message: "must not be blank"
            extensions:
              description: |
                This type represents a list of key-value pairs.
                The order of the pairs in the list is not significant.
                In JSON, a set of keyvalue pairs is represented as an object.

                **The supported EVNFM extensions:**

                * **vnfControlledScaling** [OPTIONAL]
                Overrides the controlled scaling methods specified in the VNFD.

                * **deployableModules** [OPTIONAL]
                Overrides the deployable modules specified in the VNFD.

                **Note:** parameter is not supported on a full stack system, it is supported only in a small stack scenario
              type: object